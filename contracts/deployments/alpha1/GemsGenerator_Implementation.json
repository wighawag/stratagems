{
  "address": "0x89c4277da7feafaaae31b3d1328d236470158370",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IReward",
          "name": "rewardAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "rewardRateMillionth",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fixedRewardRateThousandsMillionth",
              "type": "uint256"
            }
          ],
          "internalType": "struct RewardsGenerator.Config",
          "name": "config",
          "type": "tuple"
        },
        {
          "internalType": "address[]",
          "name": "initialGames",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NonTransferable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAuthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint112",
              "name": "toWithdraw",
              "type": "uint112"
            },
            {
              "internalType": "uint40",
              "name": "lastTime",
              "type": "uint40"
            }
          ],
          "indexed": false,
          "internalType": "struct RewardsGenerator.FixedRatePerAccount",
          "name": "fixedRateStatus",
          "type": "tuple"
        }
      ],
      "name": "AccounFixedRewardUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint112",
              "name": "points",
              "type": "uint112"
            },
            {
              "internalType": "uint104",
              "name": "totalRewardPerPointAccounted",
              "type": "uint104"
            },
            {
              "internalType": "uint112",
              "name": "rewardsToWithdraw",
              "type": "uint112"
            }
          ],
          "indexed": false,
          "internalType": "struct RewardsGenerator.SharedRatePerAccount",
          "name": "sharedRateStatus",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "AccountSharedRewardUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "game",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "GameEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint40",
              "name": "lastUpdateTime",
              "type": "uint40"
            },
            {
              "internalType": "uint104",
              "name": "totalRewardPerPointAtLastUpdate",
              "type": "uint104"
            },
            {
              "internalType": "uint112",
              "name": "totalPoints",
              "type": "uint112"
            }
          ],
          "indexed": false,
          "internalType": "struct RewardsGenerator.GlobalState",
          "name": "globalStatus",
          "type": "tuple"
        }
      ],
      "name": "GlobalRewardUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "claimFixedRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "claimSharedPoolRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "earnedFromFixedRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "earnedFromFixedRateMultipleAccounts",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "result",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "earnedFromPoolRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "earnedFromPoolRateMultipleAccounts",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "result",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "game",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "name": "enableGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "game",
          "type": "address"
        }
      ],
      "name": "games",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalRewardPerPointWithPrecision24",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "global",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint40",
              "name": "lastUpdateTime",
              "type": "uint40"
            },
            {
              "internalType": "uint104",
              "name": "totalRewardPerPointAtLastUpdate",
              "type": "uint104"
            },
            {
              "internalType": "uint112",
              "name": "totalPoints",
              "type": "uint112"
            }
          ],
          "internalType": "struct RewardsGenerator.GlobalState",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "move",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IReward",
          "name": "rewardAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "rewardRateMillionth",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fixedRewardRateThousandsMillionth",
              "type": "uint256"
            }
          ],
          "internalType": "struct RewardsGenerator.Config",
          "name": "config",
          "type": "tuple"
        },
        {
          "internalType": "address[]",
          "name": "initialGames",
          "type": "address[]"
        }
      ],
      "name": "postUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "remove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "update",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "contractName": "RewardsGenerator",
  "sourceName": "src/token/RewardsGenerator.sol",
  "bytecode": "0x604060e0815234620001cf5762001dac803803806200001e81620001ea565b92833981019080820360808112620001cf578151916001600160a01b03908184168403620001cf5785602093601f190112620001cf5785516001600160401b039481880186811183821017620001d45788528483015182528783015192858301938452606081015190878211620001cf57019680601f89011215620001cf578751968711620001d4576005978760051b908780620000be818501620001ea565b809b81520192820101928311620001cf578701905b828210620001b55750505060c052516080525160a05260009260ff8454161562000137575b8551611b9b9081620002118239608051818181610b3e01528181611497015261155c015260a05181611400015260c05181818161017a0152610da90152f35b835b81518110156200019957808385600193891b8501015116808752600486527f50b08f8489c009db3c1b3f160cc0dae1c0c6706774750c001e4c083f9483d5f389670de0b6b3a764000080828b205581519081524289820152a20162000139565b505050509050600160ff198254161790553880808080620000f8565b81518781168103620001cf578152908701908701620000d3565b600080fd5b634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f191682016001600160401b03811183821017620001d45760405256fe6080604081815260048036101561001557600080fd5b600092833560e01c908163066112f914610d575750806306fdde0314610ce4578063095ea7b3146107c357806316cf09f814610c2457806318160ddd14610be457806323b872dd14610baa578063313ce56714610b705780634848338214610aea57806359d431b314610a9657806370a0823114610a2457806379131a19146109c45780637997f96d1461096b57806395d89b41146108f4578063a05f990614610848578063a2e620451461080c578063a8671f6a146107c8578063a9059cbb146107c3578063abe7f1ab1461076e578063b061963c14610723578063bb35783b146106e9578063cee2960b146104cc578063dd62ed3e14610463578063f5d82b6b146103e55763ff1e03e91461012b57600080fd5b346103e15760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103e157610162610f47565b9073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001680156103b9579084929133845260026020526dffffffffffffffffffffffffffff9081868620541661025d6102026101d0611522565b9390503389526002602052838a8a20916cffffffffffffffffffffffffff97600189855460701c1694015416926117d2565b933388526002602052888820921682907fffffffffff00000000000000000000000000ffffffffffffffffffffffffffff7affffffffffffffffffffffffff000000000000000000000000000083549260701b169116179055565b826102eb575b858733825260026020527f5c0f9500e53293dfb7fc76f0336cfb82b44723af4b6cc4f9d36eeaf0a1054d4e8183209151806102e5339442908360609093929193608081019460018154916cffffffffffffffffffffffffff6dffffffffffffffffffffffffffff93848116865260701c16602085015201541660408201520152565b0390a280f35b6001017fffffffffffffffffffffffffffffffffffff00000000000000000000000000008154169055803b156103b557610378938580948851968795869485937f21670f2200000000000000000000000000000000000000000000000000000000855284016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af180156103a857610390575b80808080610263565b61039990611139565b6103a4578138610387565b5080fd5b50505051903d90823e3d90fd5b8480fd5b5082517fea8e4eb5000000000000000000000000000000000000000000000000000000008152fd5b8280fd5b50346103e157817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103e15761041c610f47565b9133845281602052808420541561043d578361043a60243585611813565b80f35b517fea8e4eb5000000000000000000000000000000000000000000000000000000008152fd5b8284346104c957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104c95761049b610f47565b5060243573ffffffffffffffffffffffffffffffffffffffff8116036104c45760209151908152f35b600080fd5b80fd5b508290346103a45760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103a45773ffffffffffffffffffffffffffffffffffffffff8135818116036103e157837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc3601126103e15783519067ffffffffffffffff828601818111848210176106bb57865260243583526044356020938401526064359081116103b557366023820112156103b5578084013590610593826111f5565b916105a0885193846111b4565b80835260248584019160051b830101913683116106b757602401905b82821061069f575050506105f4827fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035416331461120d565b60ff85541615610602578480f35b845b815181101561066657808361061b6001938561135d565b5116806000528686527f50b08f8489c009db3c1b3f160cc0dae1c0c6706774750c001e4c083f9483d5f389670de0b6b3a764000080826000205581519081524289820152a201610604565b5050505050905060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082541617815580828080808480f35b813585811681036104c45781529085019085016105bc565b8780fd5b6041857f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b508290346103a4576106fa36611032565b9290919433855281602052808520541561043d57505061071e8261043a9495611600565b611813565b5050346103a45760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103a457602090610767610762610f47565b61143a565b9051908152f35b50346103e157817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103e1576107a5610f47565b9133845281602052808420541561043d578361043a60243585611600565b610fd0565b5050346103a45760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103a457602090610767610807610f47565b611391565b83346104c957807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104c957610843611522565b505080f35b5050346103a457817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103a4576060918180516108878161117c565b828152826020820152015280519061089e8261117c565b6dffffffffffffffffffffffffffff60015464ffffffffff8116938481526cffffffffffffffffffffffffff90846020820191838560281c168352019260901c8352845195865251166020850152511690820152f35b5050346103a457817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103a45780516109679161093382611198565b600582527f504f494e5400000000000000000000000000000000000000000000000000000060208301525191829182610f6a565b0390f35b8284346104c95761097b36611092565b610984816112ae565b925b81811061099a5784518061096786826110fd565b806109b36108076109ae60019486886112fd565b61133c565b6109bd828761135d565b5201610986565b50346103e15760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103e157602092829173ffffffffffffffffffffffffffffffffffffffff610a16610f47565b168252845220549051908152f35b5050346103a45760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103a4576dffffffffffffffffffffffffffff8160209373ffffffffffffffffffffffffffffffffffffffff610a85610f47565b168152600285522054169051908152f35b8284346104c957610aa636611092565b610aaf816112ae565b925b818110610ac55784518061096786826110fd565b80610ad96107626109ae60019486886112fd565b610ae3828761135d565b5201610ab1565b5050346103a457817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103a4576020906107676001546cffffffffffffffffffffffffff610b6664ffffffffff83167f00000000000000000000000000000000000000000000000000000000000000008460901c6114e0565b9160281c16611272565b5050346103a457817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103a4576020905160128152f35b5091346104c95750610bbb36611032565b505050517f9cbe2357000000000000000000000000000000000000000000000000000000008152fd5b5050346103a457817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103a45760209060015460901c9051908152f35b5090346103e157807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103e1577f50b08f8489c009db3c1b3f160cc0dae1c0c6706774750c001e4c083f9483d5f390610c7e610f47565b6024359073ffffffffffffffffffffffffffffffffffffffff90610cc6827fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035416331461120d565b1693846000526020528082600020558151908152426020820152a280f35b5050346103a457817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103a457805161096791610d2382611198565b600682527f506f696e7473000000000000000000000000000000000000000000000000000060208301525191829182610f6a565b84929150346103e15760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103e157610d92610f47565b73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016918215610f205750610dda33611391565b9283610e45575b848633825260036020527f990d7fa8d559abc572e9491e8330c9707b02acdb2e054411b3e9a0498f7c70e88183209151806102e5339482919091602064ffffffffff6040830194546dffffffffffffffffffffffffffff8116845260701c16910152565b338552600360205285852080547fffffffffffffffffffffffffff000000000000000000000000000000000000001672ffffffffff00000000000000000000000000004260701b16179055823b156103b55785517f21670f2200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9092169082019081526020810193909352918391839182908490829060400103925af18015610f1657610f07575b808080610de1565b610f1090611139565b82610eff565b83513d84823e3d90fd5b807fea8e4eb500000000000000000000000000000000000000000000000000000000859252fd5b6004359073ffffffffffffffffffffffffffffffffffffffff821682036104c457565b60208082528251818301819052939260005b858110610fbc575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8460006040809697860101520116010190565b818101830151848201604001528201610f7c565b346104c45760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104c457611007610f47565b5060046040517f9cbe2357000000000000000000000000000000000000000000000000000000008152fd5b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60609101126104c45773ffffffffffffffffffffffffffffffffffffffff9060043582811681036104c4579160243590811681036104c4579060443590565b9060207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8301126104c45760043567ffffffffffffffff928382116104c457806023830112156104c45781600401359384116104c45760248460051b830101116104c4576024019190565b602090602060408183019282815285518094520193019160005b828110611125575050505090565b835185529381019392810192600101611117565b67ffffffffffffffff811161114d57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6060810190811067ffffffffffffffff82111761114d57604052565b6040810190811067ffffffffffffffff82111761114d57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761114d57604052565b67ffffffffffffffff811161114d5760051b60200190565b1561121457565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152fd5b9190820180921161127f57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b906112b8826111f5565b6112c560405191826111b4565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06112f382946111f5565b0190602036910137565b919081101561130d5760051b0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b3573ffffffffffffffffffffffffffffffffffffffff811681036104c45790565b805182101561130d5760209160051b010190565b9190820391821161127f57565b8181029291811591840414171561127f57565b73ffffffffffffffffffffffffffffffffffffffff61143791166000818152600360205260406113ce64ffffffffff8284205460701c1642611371565b918381526002602052633b9aca006114256113fe6dffffffffffffffffffffffffffff958686862054169061137e565b7f00000000000000000000000000000000000000000000000000000000000000009061137e565b04938152600360205220541690611272565b90565b73ffffffffffffffffffffffffffffffffffffffff6114379116806000526002602052604060002054906cffffffffffffffffffffffffff916dffffffffffffffffffffffffffff926114bf60015482610b6664ffffffffff83167f00000000000000000000000000000000000000000000000000000000000000008460901c6114e0565b92600052600260205283600160406000200154169382169160701c166117d2565b9190821561151a576114f56114fa9242611371565b61137e565b69d3c21bcecceda10000009081810291818304149015171561127f570490565b505050600090565b6001548060901c917fbfc9024f8ea3d8400f13d1abeffc5754eddee8b8ee97b2d8ea4ec1f2fe52156a606064ffffffffff936115818582167f0000000000000000000000000000000000000000000000000000000000000000886114e0565b61159e6cffffffffffffffffffffffffff91828460281c16611272565b95421680927fffffffffffffffffffffffffffff00000000000000000000000000000000000071ffffffffffffffffffffffffff00000000008960281b169116171790816001556040519283528160281c16602083015260901c6040820152a1565b9080156117ce576117c97f990d7fa8d559abc572e9491e8330c9707b02acdb2e054411b3e9a0498f7c70e89173ffffffffffffffffffffffffffffffffffffffff61164a8561199d565b959071ffffffffffffffffffffffffffffffffffff7fffffffffffffffffffffffffffff00000000000000000000000000000000000085600154930360901b1691161760015516936000858152600260205280867fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef602060409687966dffffffffffffffffffffffffffff828988209203167fffffffffffffffffffffffffffffffffffff00000000000000000000000000008254161790558651908152a38581526002602052857f5c0f9500e53293dfb7fc76f0336cfb82b44723af4b6cc4f9d36eeaf0a1054d4e61178a848420855191829142908360609093929193608081019460018154916cffffffffffffffffffffffffff6dffffffffffffffffffffffffffff93848116865260701c16602085015201541660408201520152565b0390a2858152600360205220905191829182919091602064ffffffffff6040830194546dffffffffffffffffffffffffffff8116845260701c16910152565b0390a2565b5050565b6117df906117e593611371565b9061137e565b9064e8d4a510009182810292818404149015171561127f5769d3c21bcecceda1000000611437920490611272565b9080156117ce576117c97f990d7fa8d559abc572e9491e8330c9707b02acdb2e054411b3e9a0498f7c70e89173ffffffffffffffffffffffffffffffffffffffff61185d8561199d565b959071ffffffffffffffffffffffffffffffffffff7fffffffffffffffffffffffffffff00000000000000000000000000000000000085600154930160901b1691161760015516936000858152600260205285817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef602060409687966dffffffffffffffffffffffffffff828987209201167fffffffffffffffffffffffffffffffffffff00000000000000000000000000008254161790558651908152a38581526002602052857f5c0f9500e53293dfb7fc76f0336cfb82b44723af4b6cc4f9d36eeaf0a1054d4e61178a848420855191829142908360609093929193608081019460018154916cffffffffffffffffffffffffff6dffffffffffffffffffffffffffff93848116865260701c16602085015201541660408201520152565b9073ffffffffffffffffffffffffffffffffffffffff916119bc611522565b9390911660009080825260026020526001611a11611a99604085209788546dffffffffffffffffffffffffffff93818386809416809d856cffffffffffffffffffffffffff9a8b920154169360701c166117d2565b169385875260026020526040872091600183017fffffffffffffffffffffffffffffffffffff00000000000000000000000000009687825416179055167fffffffffff00000000000000000000000000ffffffffffffffffffffffffffff7affffffffffffffffffffffffff000000000000000000000000000083549260701b169116179055565b600360205264ffffffffff93633b9aca00611ac46113fe8a6114f589604087205460701c1642611371565b049381526003602052611b1c6040822095421686907fffffffffffffffffffffffffff0000000000ffffffffffffffffffffffffffff72ffffffffff000000000000000000000000000083549260701b169116179055565b81855494168285160190828211611b3857501691161790559190565b807f4e487b7100000000000000000000000000000000000000000000000000000000602492526011600452fdfea2646970667358221220979da83db8f12f5c656ede9ff67f63e93140298b1be1d4904b3b9f2469658db864736f6c63430008180033",
  "deployedBytecode": "0x6080604081815260048036101561001557600080fd5b600092833560e01c908163066112f914610d575750806306fdde0314610ce4578063095ea7b3146107c357806316cf09f814610c2457806318160ddd14610be457806323b872dd14610baa578063313ce56714610b705780634848338214610aea57806359d431b314610a9657806370a0823114610a2457806379131a19146109c45780637997f96d1461096b57806395d89b41146108f4578063a05f990614610848578063a2e620451461080c578063a8671f6a146107c8578063a9059cbb146107c3578063abe7f1ab1461076e578063b061963c14610723578063bb35783b146106e9578063cee2960b146104cc578063dd62ed3e14610463578063f5d82b6b146103e55763ff1e03e91461012b57600080fd5b346103e15760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103e157610162610f47565b9073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001680156103b9579084929133845260026020526dffffffffffffffffffffffffffff9081868620541661025d6102026101d0611522565b9390503389526002602052838a8a20916cffffffffffffffffffffffffff97600189855460701c1694015416926117d2565b933388526002602052888820921682907fffffffffff00000000000000000000000000ffffffffffffffffffffffffffff7affffffffffffffffffffffffff000000000000000000000000000083549260701b169116179055565b826102eb575b858733825260026020527f5c0f9500e53293dfb7fc76f0336cfb82b44723af4b6cc4f9d36eeaf0a1054d4e8183209151806102e5339442908360609093929193608081019460018154916cffffffffffffffffffffffffff6dffffffffffffffffffffffffffff93848116865260701c16602085015201541660408201520152565b0390a280f35b6001017fffffffffffffffffffffffffffffffffffff00000000000000000000000000008154169055803b156103b557610378938580948851968795869485937f21670f2200000000000000000000000000000000000000000000000000000000855284016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af180156103a857610390575b80808080610263565b61039990611139565b6103a4578138610387565b5080fd5b50505051903d90823e3d90fd5b8480fd5b5082517fea8e4eb5000000000000000000000000000000000000000000000000000000008152fd5b8280fd5b50346103e157817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103e15761041c610f47565b9133845281602052808420541561043d578361043a60243585611813565b80f35b517fea8e4eb5000000000000000000000000000000000000000000000000000000008152fd5b8284346104c957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104c95761049b610f47565b5060243573ffffffffffffffffffffffffffffffffffffffff8116036104c45760209151908152f35b600080fd5b80fd5b508290346103a45760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103a45773ffffffffffffffffffffffffffffffffffffffff8135818116036103e157837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc3601126103e15783519067ffffffffffffffff828601818111848210176106bb57865260243583526044356020938401526064359081116103b557366023820112156103b5578084013590610593826111f5565b916105a0885193846111b4565b80835260248584019160051b830101913683116106b757602401905b82821061069f575050506105f4827fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035416331461120d565b60ff85541615610602578480f35b845b815181101561066657808361061b6001938561135d565b5116806000528686527f50b08f8489c009db3c1b3f160cc0dae1c0c6706774750c001e4c083f9483d5f389670de0b6b3a764000080826000205581519081524289820152a201610604565b5050505050905060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082541617815580828080808480f35b813585811681036104c45781529085019085016105bc565b8780fd5b6041857f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b508290346103a4576106fa36611032565b9290919433855281602052808520541561043d57505061071e8261043a9495611600565b611813565b5050346103a45760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103a457602090610767610762610f47565b61143a565b9051908152f35b50346103e157817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103e1576107a5610f47565b9133845281602052808420541561043d578361043a60243585611600565b610fd0565b5050346103a45760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103a457602090610767610807610f47565b611391565b83346104c957807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104c957610843611522565b505080f35b5050346103a457817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103a4576060918180516108878161117c565b828152826020820152015280519061089e8261117c565b6dffffffffffffffffffffffffffff60015464ffffffffff8116938481526cffffffffffffffffffffffffff90846020820191838560281c168352019260901c8352845195865251166020850152511690820152f35b5050346103a457817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103a45780516109679161093382611198565b600582527f504f494e5400000000000000000000000000000000000000000000000000000060208301525191829182610f6a565b0390f35b8284346104c95761097b36611092565b610984816112ae565b925b81811061099a5784518061096786826110fd565b806109b36108076109ae60019486886112fd565b61133c565b6109bd828761135d565b5201610986565b50346103e15760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103e157602092829173ffffffffffffffffffffffffffffffffffffffff610a16610f47565b168252845220549051908152f35b5050346103a45760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103a4576dffffffffffffffffffffffffffff8160209373ffffffffffffffffffffffffffffffffffffffff610a85610f47565b168152600285522054169051908152f35b8284346104c957610aa636611092565b610aaf816112ae565b925b818110610ac55784518061096786826110fd565b80610ad96107626109ae60019486886112fd565b610ae3828761135d565b5201610ab1565b5050346103a457817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103a4576020906107676001546cffffffffffffffffffffffffff610b6664ffffffffff83167f00000000000000000000000000000000000000000000000000000000000000008460901c6114e0565b9160281c16611272565b5050346103a457817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103a4576020905160128152f35b5091346104c95750610bbb36611032565b505050517f9cbe2357000000000000000000000000000000000000000000000000000000008152fd5b5050346103a457817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103a45760209060015460901c9051908152f35b5090346103e157807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103e1577f50b08f8489c009db3c1b3f160cc0dae1c0c6706774750c001e4c083f9483d5f390610c7e610f47565b6024359073ffffffffffffffffffffffffffffffffffffffff90610cc6827fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035416331461120d565b1693846000526020528082600020558151908152426020820152a280f35b5050346103a457817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103a457805161096791610d2382611198565b600682527f506f696e7473000000000000000000000000000000000000000000000000000060208301525191829182610f6a565b84929150346103e15760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103e157610d92610f47565b73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016918215610f205750610dda33611391565b9283610e45575b848633825260036020527f990d7fa8d559abc572e9491e8330c9707b02acdb2e054411b3e9a0498f7c70e88183209151806102e5339482919091602064ffffffffff6040830194546dffffffffffffffffffffffffffff8116845260701c16910152565b338552600360205285852080547fffffffffffffffffffffffffff000000000000000000000000000000000000001672ffffffffff00000000000000000000000000004260701b16179055823b156103b55785517f21670f2200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9092169082019081526020810193909352918391839182908490829060400103925af18015610f1657610f07575b808080610de1565b610f1090611139565b82610eff565b83513d84823e3d90fd5b807fea8e4eb500000000000000000000000000000000000000000000000000000000859252fd5b6004359073ffffffffffffffffffffffffffffffffffffffff821682036104c457565b60208082528251818301819052939260005b858110610fbc575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8460006040809697860101520116010190565b818101830151848201604001528201610f7c565b346104c45760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104c457611007610f47565b5060046040517f9cbe2357000000000000000000000000000000000000000000000000000000008152fd5b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60609101126104c45773ffffffffffffffffffffffffffffffffffffffff9060043582811681036104c4579160243590811681036104c4579060443590565b9060207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8301126104c45760043567ffffffffffffffff928382116104c457806023830112156104c45781600401359384116104c45760248460051b830101116104c4576024019190565b602090602060408183019282815285518094520193019160005b828110611125575050505090565b835185529381019392810192600101611117565b67ffffffffffffffff811161114d57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6060810190811067ffffffffffffffff82111761114d57604052565b6040810190811067ffffffffffffffff82111761114d57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761114d57604052565b67ffffffffffffffff811161114d5760051b60200190565b1561121457565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152fd5b9190820180921161127f57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b906112b8826111f5565b6112c560405191826111b4565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06112f382946111f5565b0190602036910137565b919081101561130d5760051b0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b3573ffffffffffffffffffffffffffffffffffffffff811681036104c45790565b805182101561130d5760209160051b010190565b9190820391821161127f57565b8181029291811591840414171561127f57565b73ffffffffffffffffffffffffffffffffffffffff61143791166000818152600360205260406113ce64ffffffffff8284205460701c1642611371565b918381526002602052633b9aca006114256113fe6dffffffffffffffffffffffffffff958686862054169061137e565b7f00000000000000000000000000000000000000000000000000000000000000009061137e565b04938152600360205220541690611272565b90565b73ffffffffffffffffffffffffffffffffffffffff6114379116806000526002602052604060002054906cffffffffffffffffffffffffff916dffffffffffffffffffffffffffff926114bf60015482610b6664ffffffffff83167f00000000000000000000000000000000000000000000000000000000000000008460901c6114e0565b92600052600260205283600160406000200154169382169160701c166117d2565b9190821561151a576114f56114fa9242611371565b61137e565b69d3c21bcecceda10000009081810291818304149015171561127f570490565b505050600090565b6001548060901c917fbfc9024f8ea3d8400f13d1abeffc5754eddee8b8ee97b2d8ea4ec1f2fe52156a606064ffffffffff936115818582167f0000000000000000000000000000000000000000000000000000000000000000886114e0565b61159e6cffffffffffffffffffffffffff91828460281c16611272565b95421680927fffffffffffffffffffffffffffff00000000000000000000000000000000000071ffffffffffffffffffffffffff00000000008960281b169116171790816001556040519283528160281c16602083015260901c6040820152a1565b9080156117ce576117c97f990d7fa8d559abc572e9491e8330c9707b02acdb2e054411b3e9a0498f7c70e89173ffffffffffffffffffffffffffffffffffffffff61164a8561199d565b959071ffffffffffffffffffffffffffffffffffff7fffffffffffffffffffffffffffff00000000000000000000000000000000000085600154930360901b1691161760015516936000858152600260205280867fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef602060409687966dffffffffffffffffffffffffffff828988209203167fffffffffffffffffffffffffffffffffffff00000000000000000000000000008254161790558651908152a38581526002602052857f5c0f9500e53293dfb7fc76f0336cfb82b44723af4b6cc4f9d36eeaf0a1054d4e61178a848420855191829142908360609093929193608081019460018154916cffffffffffffffffffffffffff6dffffffffffffffffffffffffffff93848116865260701c16602085015201541660408201520152565b0390a2858152600360205220905191829182919091602064ffffffffff6040830194546dffffffffffffffffffffffffffff8116845260701c16910152565b0390a2565b5050565b6117df906117e593611371565b9061137e565b9064e8d4a510009182810292818404149015171561127f5769d3c21bcecceda1000000611437920490611272565b9080156117ce576117c97f990d7fa8d559abc572e9491e8330c9707b02acdb2e054411b3e9a0498f7c70e89173ffffffffffffffffffffffffffffffffffffffff61185d8561199d565b959071ffffffffffffffffffffffffffffffffffff7fffffffffffffffffffffffffffff00000000000000000000000000000000000085600154930160901b1691161760015516936000858152600260205285817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef602060409687966dffffffffffffffffffffffffffff828987209201167fffffffffffffffffffffffffffffffffffff00000000000000000000000000008254161790558651908152a38581526002602052857f5c0f9500e53293dfb7fc76f0336cfb82b44723af4b6cc4f9d36eeaf0a1054d4e61178a848420855191829142908360609093929193608081019460018154916cffffffffffffffffffffffffff6dffffffffffffffffffffffffffff93848116865260701c16602085015201541660408201520152565b9073ffffffffffffffffffffffffffffffffffffffff916119bc611522565b9390911660009080825260026020526001611a11611a99604085209788546dffffffffffffffffffffffffffff93818386809416809d856cffffffffffffffffffffffffff9a8b920154169360701c166117d2565b169385875260026020526040872091600183017fffffffffffffffffffffffffffffffffffff00000000000000000000000000009687825416179055167fffffffffff00000000000000000000000000ffffffffffffffffffffffffffff7affffffffffffffffffffffffff000000000000000000000000000083549260701b169116179055565b600360205264ffffffffff93633b9aca00611ac46113fe8a6114f589604087205460701c1642611371565b049381526003602052611b1c6040822095421686907fffffffffffffffffffffffffff0000000000ffffffffffffffffffffffffffff72ffffffffff000000000000000000000000000083549260701b169116179055565b81855494168285160190828211611b3857501691161790559190565b807f4e487b7100000000000000000000000000000000000000000000000000000000602492526011600452fdfea2646970667358221220979da83db8f12f5c656ede9ff67f63e93140298b1be1d4904b3b9f2469658db864736f6c63430008180033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "params": {
          "owner": "the account approving the `spender`",
          "spender": "the account allowed to spend",
          "value": "the amount granted"
        }
      },
      "Transfer(address,address,uint256)": {
        "params": {
          "from": "the account the tokens are sent from",
          "to": "the account the tokens are sent to",
          "value": "number of tokens sent"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "claimFixedRewards(address)": {
        "params": {
          "to": "address to send the reward to"
        }
      },
      "claimSharedPoolRewards(address)": {
        "params": {
          "to": "address to send the reward to"
        }
      },
      "earnedFromFixedRate(address)": {
        "params": {
          "account": "address to query about"
        }
      },
      "earnedFromFixedRateMultipleAccounts(address[])": {
        "params": {
          "accounts": "list of address to query about"
        }
      },
      "earnedFromPoolRate(address)": {
        "params": {
          "account": "address to query about"
        }
      },
      "earnedFromPoolRateMultipleAccounts(address[])": {
        "params": {
          "accounts": "list of address to query about"
        }
      },
      "enableGame(address,uint256)": {
        "params": {
          "game": "the contract that is allowed to call in",
          "weight": "(not implemented, act as boolean for now) (0 disable the game)"
        }
      },
      "games(address)": {
        "params": {
          "game": "the contract to query about"
        },
        "returns": {
          "weight": "the weight of the game (not implemented, act as boolean for now)"
        }
      }
    },
    "version": 1
  },
  "evm": {
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "1413400",
        "executionCost": "infinite",
        "totalCost": "infinite"
      },
      "external": {
        "add(address,uint256)": "infinite",
        "allowance(address,address)": "726",
        "approve(address,uint256)": "283",
        "balanceOf(address)": "2602",
        "claimFixedRewards(address)": "infinite",
        "claimSharedPoolRewards(address)": "infinite",
        "decimals()": "300",
        "earnedFromFixedRate(address)": "infinite",
        "earnedFromFixedRateMultipleAccounts(address[])": "infinite",
        "earnedFromPoolRate(address)": "infinite",
        "earnedFromPoolRateMultipleAccounts(address[])": "infinite",
        "enableGame(address,uint256)": "26297",
        "games(address)": "2616",
        "getTotalRewardPerPointWithPrecision24()": "infinite",
        "global()": "infinite",
        "move(address,address,uint256)": "infinite",
        "name()": "infinite",
        "postUpgrade(address,(uint256,uint256),address[])": "infinite",
        "remove(address,uint256)": "infinite",
        "symbol()": "infinite",
        "totalSupply()": "2368",
        "transfer(address,uint256)": "591",
        "transferFrom(address,address,uint256)": "397",
        "update()": "infinite"
      },
      "internal": {
        "_add(address,uint256)": "infinite",
        "_computeExtraTotalRewardPerPointSinceLastTime(uint256,uint256,uint256)": "259",
        "_computeRewardsEarned(uint256,uint256,uint256,uint256)": "304",
        "_enableGame(address,uint256)": "infinite",
        "_postUpgrade(contract IReward,struct RewardsGenerator.Config memory,address[] memory)": "infinite",
        "_remove(address,uint256)": "infinite",
        "_update(address)": "infinite",
        "_updateAccount(address,uint256)": "infinite",
        "_updateGlobal()": "infinite"
      }
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IReward\",\"name\":\"rewardAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rewardRateMillionth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fixedRewardRateThousandsMillionth\",\"type\":\"uint256\"}],\"internalType\":\"struct RewardsGenerator.Config\",\"name\":\"config\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"initialGames\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NonTransferable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAuthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint112\",\"name\":\"toWithdraw\",\"type\":\"uint112\"},{\"internalType\":\"uint40\",\"name\":\"lastTime\",\"type\":\"uint40\"}],\"indexed\":false,\"internalType\":\"struct RewardsGenerator.FixedRatePerAccount\",\"name\":\"fixedRateStatus\",\"type\":\"tuple\"}],\"name\":\"AccounFixedRewardUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint112\",\"name\":\"points\",\"type\":\"uint112\"},{\"internalType\":\"uint104\",\"name\":\"totalRewardPerPointAccounted\",\"type\":\"uint104\"},{\"internalType\":\"uint112\",\"name\":\"rewardsToWithdraw\",\"type\":\"uint112\"}],\"indexed\":false,\"internalType\":\"struct RewardsGenerator.SharedRatePerAccount\",\"name\":\"sharedRateStatus\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AccountSharedRewardUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"game\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"GameEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint40\",\"name\":\"lastUpdateTime\",\"type\":\"uint40\"},{\"internalType\":\"uint104\",\"name\":\"totalRewardPerPointAtLastUpdate\",\"type\":\"uint104\"},{\"internalType\":\"uint112\",\"name\":\"totalPoints\",\"type\":\"uint112\"}],\"indexed\":false,\"internalType\":\"struct RewardsGenerator.GlobalState\",\"name\":\"globalStatus\",\"type\":\"tuple\"}],\"name\":\"GlobalRewardUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimFixedRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimSharedPoolRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earnedFromFixedRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"earnedFromFixedRateMultipleAccounts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"result\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earnedFromPoolRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"earnedFromPoolRateMultipleAccounts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"result\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"game\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"enableGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"game\",\"type\":\"address\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalRewardPerPointWithPrecision24\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"global\",\"outputs\":[{\"components\":[{\"internalType\":\"uint40\",\"name\":\"lastUpdateTime\",\"type\":\"uint40\"},{\"internalType\":\"uint104\",\"name\":\"totalRewardPerPointAtLastUpdate\",\"type\":\"uint104\"},{\"internalType\":\"uint112\",\"name\":\"totalPoints\",\"type\":\"uint112\"}],\"internalType\":\"struct RewardsGenerator.GlobalState\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"move\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IReward\",\"name\":\"rewardAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rewardRateMillionth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fixedRewardRateThousandsMillionth\",\"type\":\"uint256\"}],\"internalType\":\"struct RewardsGenerator.Config\",\"name\":\"config\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"initialGames\",\"type\":\"address[]\"}],\"name\":\"postUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"params\":{\"owner\":\"the account approving the `spender`\",\"spender\":\"the account allowed to spend\",\"value\":\"the amount granted\"}},\"Transfer(address,address,uint256)\":{\"params\":{\"from\":\"the account the tokens are sent from\",\"to\":\"the account the tokens are sent to\",\"value\":\"number of tokens sent\"}}},\"kind\":\"dev\",\"methods\":{\"claimFixedRewards(address)\":{\"params\":{\"to\":\"address to send the reward to\"}},\"claimSharedPoolRewards(address)\":{\"params\":{\"to\":\"address to send the reward to\"}},\"earnedFromFixedRate(address)\":{\"params\":{\"account\":\"address to query about\"}},\"earnedFromFixedRateMultipleAccounts(address[])\":{\"params\":{\"accounts\":\"list of address to query about\"}},\"earnedFromPoolRate(address)\":{\"params\":{\"account\":\"address to query about\"}},\"earnedFromPoolRateMultipleAccounts(address[])\":{\"params\":{\"accounts\":\"list of address to query about\"}},\"enableGame(address,uint256)\":{\"params\":{\"game\":\"the contract that is allowed to call in\",\"weight\":\"(not implemented, act as boolean for now) (0 disable the game)\"}},\"games(address)\":{\"params\":{\"game\":\"the contract to query about\"},\"returns\":{\"weight\":\"the weight of the game (not implemented, act as boolean for now)\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"NonTransferable()\":[{\"notice\":\"Token cannot be transfered\"}],\"NotAuthorized()\":[{\"notice\":\"Not authorized to perform this operation\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"notice\":\"trigger on approval amount being set.   Note that Transfer events need to be considered to compute the current allowance.\"},\"Transfer(address,address,uint256)\":{\"notice\":\"trigger when tokens are transferred, including zero value transfers.\"}},\"kind\":\"user\",\"methods\":{\"allowance(address,address)\":{\"notice\":\"Returns the amount which `spender` is still allowed to withdraw from `owner`.\"},\"approve(address,uint256)\":{\"notice\":\"Allows `spender` to withdraw from your account multiple times, up to `amount`.\"},\"balanceOf(address)\":{\"notice\":\"Returns the account balance of another account with address `owner`.\"},\"claimFixedRewards(address)\":{\"notice\":\"claim the rewards earned so far using a fixed rate per point\"},\"claimSharedPoolRewards(address)\":{\"notice\":\"claim the rewards earned so far in the shared pool\"},\"decimals()\":{\"notice\":\"Returns the number of decimals the token uses.\"},\"earnedFromFixedRate(address)\":{\"notice\":\"The amount of reward an account has accrued so far. Does not include already withdrawn rewards.\"},\"earnedFromFixedRateMultipleAccounts(address[])\":{\"notice\":\"The amount of reward an account has accrued so far. Does not include already withdrawn rewards.\"},\"earnedFromPoolRate(address)\":{\"notice\":\"The amount of reward an account has accrued so far. Does not include already withdrawn rewards.\"},\"earnedFromPoolRateMultipleAccounts(address[])\":{\"notice\":\"The amount of reward an account has accrued so far. Does not include already withdrawn rewards.\"},\"enableGame(address,uint256)\":{\"notice\":\"Allow a contract (a game) to add points to the rewards system\"},\"games(address)\":{\"notice\":\"return the weight of the game\"},\"getTotalRewardPerPointWithPrecision24()\":{\"notice\":\"The amount of reward each point has earned so far\"},\"global()\":{\"notice\":\"return the current global state\"},\"name()\":{\"notice\":\"Returns the name of the token.\"},\"symbol()\":{\"notice\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"notice\":\"Returns the total token supply.\"},\"transfer(address,uint256)\":{\"notice\":\"Transfers `amount` of tokens to address `to`.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfers `amount` tokens from address `from` to address `to`.\"},\"update()\":{\"notice\":\"update the global pool rate\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/token/RewardsGenerator.sol\":\"RewardsGenerator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"solidity-kit/solc_0_8/ERC20/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./UsingERC20Events.sol\\\";\\n\\ninterface IERC20 is UsingERC20Events {\\n    /// @notice Returns the total token supply.\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice Returns the number of decimals the token uses.\\n    function decimals() external view returns (uint8);\\n\\n    /// @notice Returns the symbol of the token.\\n    function symbol() external view returns (string memory);\\n\\n    /// @notice Returns the name of the token.\\n    function name() external view returns (string memory);\\n\\n    /// @notice Returns the account balance of another account with address `owner`.\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /// @notice Transfers `amount` of tokens to address `to`.\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /// @notice Returns the amount which `spender` is still allowed to withdraw from `owner`.\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /// @notice Allows `spender` to withdraw from your account multiple times, up to `amount`.\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /// @notice Transfers `amount` tokens from address `from` to address `to`.\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x3a6bcd5cf1d9e50fbe405f4c6c9c868e97ce2a84ae99fd7c1fb2d916c4d5debd\",\"license\":\"MIT\"},\"solidity-kit/solc_0_8/ERC20/interfaces/UsingERC20Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface UsingERC20Events {\\n    /// @notice trigger when tokens are transferred, including zero value transfers.\\n    /// @param from the account the tokens are sent from\\n    /// @param to the account the tokens are sent to\\n    /// @param value number of tokens sent\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice trigger on approval amount being set.\\n    ///   Note that Transfer events need to be considered to compute the current allowance.\\n    /// @param owner the account approving the `spender`\\n    /// @param spender the account allowed to spend\\n    /// @param value the amount granted\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x15eaa1de7fe9e02ba9e83f262b2b7f33a4bfe0f5a3ae2be4d616b6c4dce1c6fa\",\"license\":\"MIT\"},\"solidity-kit/solc_0_8/utils/UsingGenericErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface UsingGenericErrors {\\n    /// @notice Not authorized to perform this operation\\n    error NotAuthorized();\\n\\n    /// @notice Token cannot be transfered\\n    error NonTransferable();\\n\\n    /// @notice function is not implemented\\n    error NotImplemented();\\n}\\n\",\"keccak256\":\"0x20c56b2d5fb3d35c86ba8325a342f4e7c21c8db3c5edf967f7ddd0c49f692e8f\",\"license\":\"MIT\"},\"solidity-proxy/solc_0_8/ERC1967/Proxied.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract Proxied {\\n    /// @notice to be used by initialisation / postUpgrade function so that only the proxy's admin can execute them\\n    /// It also allows these functions to be called inside a contructor\\n    /// even if the contract is meant to be used without proxy\\n    modifier proxied() {\\n        address proxyAdminAddress = _proxyAdmin();\\n        // With hardhat-deploy proxies\\n        // the proxyAdminAddress is zero only for the implementation contract\\n        // if the implementation contract want to be used as a standalone/immutable contract\\n        // it simply has to execute the `proxied` function\\n        // This ensure the proxyAdminAddress is never zero post deployment\\n        // And allow you to keep the same code for both proxied contract and immutable contract\\n        if (proxyAdminAddress == address(0)) {\\n            // ensure can not be called twice when used outside of proxy : no admin\\n            // solhint-disable-next-line security/no-inline-assembly\\n            assembly {\\n                sstore(\\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                )\\n            }\\n        } else {\\n            require(msg.sender == proxyAdminAddress);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyProxyAdmin() {\\n        require(msg.sender == _proxyAdmin(), \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function _proxyAdmin() internal view returns (address ownerAddress) {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            ownerAddress := sload(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaceeafeeaf0d200ca3942d8bf14c1c4f787a77f79cc87c08bb668e65acdee29\",\"license\":\"MIT\"},\"src/token/RewardsGenerator.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"solidity-kit/solc_0_8/ERC20/interfaces/IERC20.sol\\\";\\nimport \\\"./interface/IOnStakeChange.sol\\\";\\nimport \\\"./interface/IReward.sol\\\";\\nimport \\\"solidity-proxy/solc_0_8/ERC1967/Proxied.sol\\\";\\nimport \\\"solidity-kit/solc_0_8/utils/UsingGenericErrors.sol\\\";\\n\\ncontract RewardsGenerator is IERC20, IOnStakeChange, Proxied {\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // Constants and immutables\\n    // ---------------------------------------------------------------------------------------------------------------\\n\\n    string internal constant SYMBOL = \\\"POINT\\\";\\n    string internal constant NAME = \\\"Points\\\";\\n    uint256 internal constant PRECISION = 1e24;\\n    uint256 internal constant DECIMALS_18_MILLIONTH = 1000000000000; // 1 millionth of a token so that it matches with REWARD_RATE_millionth\\n\\n    uint256 internal immutable REWARD_RATE_millionth;\\n    uint256 internal immutable FIXED_REWARD_RATE_thousands_millionth;\\n    IReward internal immutable REWARD;\\n\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // Events\\n    // ---------------------------------------------------------------------------------------------------------------\\n\\n    event GameEnabled(address indexed game, uint256 weight, uint256 timestamp);\\n    event AccounFixedRewardUpdated(address indexed account, FixedRatePerAccount fixedRateStatus);\\n    event AccountSharedRewardUpdated(address indexed account, SharedRatePerAccount sharedRateStatus, uint256 timestamp);\\n    event GlobalRewardUpdated(GlobalState globalStatus);\\n\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // State\\n    // ---------------------------------------------------------------------------------------------------------------\\n\\n    bool internal _init;\\n\\n    struct GlobalState {\\n        uint40 lastUpdateTime;\\n        uint104 totalRewardPerPointAtLastUpdate; // PRECISION = 1e24\\n        uint112 totalPoints;\\n    }\\n    GlobalState _global;\\n\\n    struct SharedRatePerAccount {\\n        uint112 points;\\n        uint104 totalRewardPerPointAccounted; // PRECISION = 1e24\\n        // we do not pack here as we want to keep precision\\n        uint112 rewardsToWithdraw;\\n    }\\n\\n    mapping(address => SharedRatePerAccount) _sharedRateRewardPerAccount;\\n\\n    struct FixedRatePerAccount {\\n        uint112 toWithdraw;\\n        uint40 lastTime;\\n    }\\n    mapping(address => FixedRatePerAccount) internal _fixedRateRewardPerAccount;\\n\\n    mapping(address => uint256) internal _games;\\n\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // Constructor AND Upgrade\\n    // ---------------------------------------------------------------------------------------------------------------\\n\\n    struct Config {\\n        uint256 rewardRateMillionth;\\n        uint256 fixedRewardRateThousandsMillionth;\\n    }\\n\\n    constructor(IReward rewardAddress, Config memory config, address[] memory initialGames) {\\n        REWARD = rewardAddress;\\n        REWARD_RATE_millionth = config.rewardRateMillionth;\\n        FIXED_REWARD_RATE_thousands_millionth = config.fixedRewardRateThousandsMillionth;\\n\\n        _postUpgrade(rewardAddress, config, initialGames);\\n    }\\n\\n    function postUpgrade(\\n        IReward rewardAddress,\\n        Config memory config,\\n        address[] memory initialGames\\n    ) external onlyProxyAdmin {\\n        _postUpgrade(rewardAddress, config, initialGames);\\n    }\\n\\n    function _postUpgrade(IReward, Config memory, address[] memory initialGames) internal {\\n        if (!_init) {\\n            for (uint256 i = 0; i < initialGames.length; i++) {\\n                _enableGame(initialGames[i], 1000000000000000000);\\n            }\\n            _init = true;\\n        }\\n    }\\n\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // External\\n    // ---------------------------------------------------------------------------------------------------------------\\n\\n    /// @notice Allow a contract (a game) to add points to the rewards system\\n    /// @param game the contract that is allowed to call in\\n    /// @param weight (not implemented, act as boolean for now) (0 disable the game)\\n    function enableGame(address game, uint256 weight) external onlyProxyAdmin {\\n        _enableGame(game, weight);\\n    }\\n\\n    /// @notice return the weight of the game\\n    /// @param game the contract to query about\\n    /// @return weight the weight of the game (not implemented, act as boolean for now)\\n    function games(address game) external view returns (uint256 weight) {\\n        weight = _games[game];\\n    }\\n\\n    /// @notice return the current global state\\n    function global() external view returns (GlobalState memory) {\\n        return _global;\\n    }\\n\\n    /// @inheritdoc IOnStakeChange\\n    function add(address account, uint256 amount) external override onlyGames {\\n        _add(account, amount);\\n    }\\n\\n    /// @inheritdoc IOnStakeChange\\n    function remove(address account, uint256 amount) external override onlyGames {\\n        _remove(account, amount);\\n    }\\n\\n    /// @inheritdoc IOnStakeChange\\n    function move(address from, address to, uint256 amount) external override onlyGames {\\n        _remove(from, amount);\\n        _add(to, amount);\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function name() public pure returns (string memory) {\\n        return NAME;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function symbol() external pure returns (string memory) {\\n        return SYMBOL;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function totalSupply() external view override returns (uint256) {\\n        return _global.totalPoints;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function balanceOf(address owner) external view override returns (uint256) {\\n        return _sharedRateRewardPerAccount[owner].points;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function allowance(address, address) external pure override returns (uint256) {\\n        return 0;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function decimals() external pure virtual returns (uint8) {\\n        return uint8(18);\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function transfer(address, uint256) external pure returns (bool) {\\n        revert UsingGenericErrors.NonTransferable();\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function approve(address, uint256) external pure returns (bool) {\\n        revert UsingGenericErrors.NonTransferable();\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function transferFrom(address, address, uint256) external pure returns (bool) {\\n        revert UsingGenericErrors.NonTransferable();\\n    }\\n\\n    /// @notice claim the rewards earned so far in the shared pool\\n    /// @param to address to send the reward to\\n    function claimSharedPoolRewards(address to) external {\\n        if (address(REWARD) == address(0)) {\\n            revert UsingGenericErrors.NotAuthorized();\\n        }\\n        address account = msg.sender;\\n        uint256 accountPointsSoFar = _sharedRateRewardPerAccount[account].points;\\n\\n        (, uint256 totalRewardPerPoint) = _updateGlobal();\\n        uint256 amount = _computeRewardsEarned(\\n            _sharedRateRewardPerAccount[account].totalRewardPerPointAccounted,\\n            accountPointsSoFar,\\n            totalRewardPerPoint,\\n            _sharedRateRewardPerAccount[account].rewardsToWithdraw\\n        );\\n        _sharedRateRewardPerAccount[account].totalRewardPerPointAccounted = uint104(totalRewardPerPoint);\\n\\n        if (amount > 0) {\\n            _sharedRateRewardPerAccount[account].rewardsToWithdraw = 0;\\n            REWARD.reward(to, amount);\\n        }\\n\\n        emit AccountSharedRewardUpdated(account, _sharedRateRewardPerAccount[account], block.timestamp);\\n    }\\n\\n    /// @notice claim the rewards earned so far using a fixed rate per point\\n    /// @param to address to send the reward to\\n    function claimFixedRewards(address to) external {\\n        if (address(REWARD) == address(0)) {\\n            revert UsingGenericErrors.NotAuthorized();\\n        }\\n        address account = msg.sender;\\n        uint256 amount = earnedFromFixedRate(account);\\n        if (amount > 0) {\\n            _fixedRateRewardPerAccount[account].lastTime = uint40(block.timestamp);\\n            _fixedRateRewardPerAccount[account].toWithdraw = 0;\\n            REWARD.reward(to, amount);\\n        }\\n        emit AccounFixedRewardUpdated(account, _fixedRateRewardPerAccount[account]);\\n    }\\n\\n    /// @notice The amount of reward each point has earned so far\\n    function getTotalRewardPerPointWithPrecision24() external view returns (uint256) {\\n        return\\n            _global.totalRewardPerPointAtLastUpdate +\\n            _computeExtraTotalRewardPerPointSinceLastTime(\\n                _global.totalPoints,\\n                REWARD_RATE_millionth,\\n                _global.lastUpdateTime\\n            );\\n    }\\n\\n    /// @notice The amount of reward an account has accrued so far. Does not include already withdrawn rewards.\\n    /// @param account address to query about\\n    function earnedFromPoolRate(address account) public view returns (uint256) {\\n        return\\n            _computeRewardsEarned(\\n                _sharedRateRewardPerAccount[account].totalRewardPerPointAccounted,\\n                _sharedRateRewardPerAccount[account].points,\\n                _global.totalRewardPerPointAtLastUpdate +\\n                    _computeExtraTotalRewardPerPointSinceLastTime(\\n                        _global.totalPoints,\\n                        REWARD_RATE_millionth,\\n                        _global.lastUpdateTime\\n                    ),\\n                _sharedRateRewardPerAccount[account].rewardsToWithdraw\\n            );\\n    }\\n\\n    /// @notice The amount of reward an account has accrued so far. Does not include already withdrawn rewards.\\n    /// @param account address to query about\\n    function earnedFromFixedRate(address account) public view returns (uint256) {\\n        uint256 extraFixed = ((block.timestamp - _fixedRateRewardPerAccount[account].lastTime) *\\n            _sharedRateRewardPerAccount[account].points *\\n            FIXED_REWARD_RATE_thousands_millionth) / 1000000000;\\n        return extraFixed + _fixedRateRewardPerAccount[account].toWithdraw;\\n    }\\n\\n    /// @notice The amount of reward an account has accrued so far. Does not include already withdrawn rewards.\\n    /// @param accounts list of address to query about\\n    function earnedFromFixedRateMultipleAccounts(\\n        address[] calldata accounts\\n    ) external view returns (uint256[] memory result) {\\n        result = new uint256[](accounts.length);\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            result[i] = earnedFromFixedRate(accounts[i]);\\n        }\\n    }\\n\\n    /// @notice The amount of reward an account has accrued so far. Does not include already withdrawn rewards.\\n    /// @param accounts list of address to query about\\n    function earnedFromPoolRateMultipleAccounts(\\n        address[] calldata accounts\\n    ) external view returns (uint256[] memory result) {\\n        result = new uint256[](accounts.length);\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            result[i] = earnedFromPoolRate(accounts[i]);\\n        }\\n    }\\n\\n    /// @notice update the global pool rate\\n    function update() external {\\n        _updateGlobal();\\n    }\\n\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // Internal\\n    // ---------------------------------------------------------------------------------------------------------------\\n\\n    function _enableGame(address game, uint256 weight) internal {\\n        _games[game] = weight;\\n        emit GameEnabled(game, weight, block.timestamp);\\n    }\\n\\n    function _add(address account, uint256 amount) internal {\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        (uint256 totalPointsSoFar, uint256 accountPointsSoFar) = _update(account);\\n\\n        unchecked {\\n            // update total points and the account's point, their reward will be counted on next interaction.\\n            _global.totalPoints = uint112(totalPointsSoFar + amount);\\n            _sharedRateRewardPerAccount[account].points = uint112(accountPointsSoFar + amount);\\n        }\\n        emit Transfer(address(0), account, amount);\\n        emit AccountSharedRewardUpdated(account, _sharedRateRewardPerAccount[account], block.timestamp);\\n        emit AccounFixedRewardUpdated(account, _fixedRateRewardPerAccount[account]);\\n    }\\n\\n    function _remove(address account, uint256 amount) internal {\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        // update the amount generated, store it in\\n        (uint256 totalPointsSoFar, uint256 accountPointsSoFar) = _update(account);\\n\\n        unchecked {\\n            // update total points and the account's point, their reward will be counted on next interaction.\\n            _global.totalPoints = uint112(totalPointsSoFar - amount);\\n            _sharedRateRewardPerAccount[account].points = uint112(accountPointsSoFar - amount);\\n        }\\n        emit Transfer(account, address(0), amount);\\n        emit AccountSharedRewardUpdated(account, _sharedRateRewardPerAccount[account], block.timestamp);\\n        emit AccounFixedRewardUpdated(account, _fixedRateRewardPerAccount[account]);\\n    }\\n\\n    function _computeRewardsEarned(\\n        uint256 totalRewardPerPointAccountedSoFar,\\n        uint256 accountPoints,\\n        uint256 currentTotalRewardPerPoint,\\n        uint256 accountRewardsSoFar\\n    ) internal pure returns (uint256) {\\n        return\\n            accountRewardsSoFar +\\n            (((accountPoints * (currentTotalRewardPerPoint - totalRewardPerPointAccountedSoFar)) *\\n                DECIMALS_18_MILLIONTH) / PRECISION);\\n    }\\n\\n    function _computeExtraTotalRewardPerPointSinceLastTime(\\n        uint256 totalPoints,\\n        uint256 rewardRateMillionth,\\n        uint256 lastUpdateTime\\n    ) internal view returns (uint256) {\\n        if (totalPoints == 0) {\\n            return 0;\\n        }\\n        return ((block.timestamp - lastUpdateTime) * rewardRateMillionth * PRECISION) / totalPoints;\\n    }\\n\\n    function _updateGlobal() internal returns (uint256 totalPointsSoFar, uint256 totalRewardPerPointAllocatedSoFar) {\\n        totalPointsSoFar = _global.totalPoints;\\n\\n        uint256 extraTotalRewardPerPoint = _computeExtraTotalRewardPerPointSinceLastTime(\\n            totalPointsSoFar,\\n            REWARD_RATE_millionth,\\n            _global.lastUpdateTime\\n        );\\n\\n        totalRewardPerPointAllocatedSoFar = _global.totalRewardPerPointAtLastUpdate + extraTotalRewardPerPoint;\\n\\n        _global.totalRewardPerPointAtLastUpdate = uint104(totalRewardPerPointAllocatedSoFar);\\n        _global.lastUpdateTime = uint40(block.timestamp);\\n\\n        emit GlobalRewardUpdated(_global);\\n    }\\n\\n    function _updateAccount(\\n        address account,\\n        uint256 totalRewardPerPointAllocatedSoFar\\n    ) internal returns (uint256 accountPointsSoFar) {\\n        accountPointsSoFar = _sharedRateRewardPerAccount[account].points;\\n\\n        // update the reward that can be withdrawn, catching up account state to global\\n        _sharedRateRewardPerAccount[account].rewardsToWithdraw = uint112(\\n            _computeRewardsEarned(\\n                // last checkpoint : when was the account last updated\\n                _sharedRateRewardPerAccount[account].totalRewardPerPointAccounted,\\n                accountPointsSoFar,\\n                totalRewardPerPointAllocatedSoFar,\\n                // rewards already registered\\n                _sharedRateRewardPerAccount[account].rewardsToWithdraw\\n            )\\n        );\\n        _sharedRateRewardPerAccount[account].totalRewardPerPointAccounted = uint104(totalRewardPerPointAllocatedSoFar);\\n\\n        uint256 extraFixed = ((block.timestamp - _fixedRateRewardPerAccount[account].lastTime) *\\n            accountPointsSoFar *\\n            FIXED_REWARD_RATE_thousands_millionth) / 1000000000;\\n        _fixedRateRewardPerAccount[account].lastTime = uint40(block.timestamp);\\n        _fixedRateRewardPerAccount[account].toWithdraw += uint112(extraFixed);\\n    }\\n\\n    function _update(address account) internal returns (uint256, uint256) {\\n        (uint256 totalPointsSoFar, uint256 totalRewardPerPointAllocatedSoFar) = _updateGlobal();\\n        uint256 accountPointsSoFar = _updateAccount(account, totalRewardPerPointAllocatedSoFar);\\n        return (totalPointsSoFar, accountPointsSoFar);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // Modifiers\\n    // ---------------------------------------------------------------------------------------------------------------\\n\\n    modifier onlyGames() {\\n        if (_games[msg.sender] == 0) {\\n            revert UsingGenericErrors.NotAuthorized();\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x41f7e8655628fdae7b5ed38cfa5e1324b79891331cc171a1cfe1144eedeac4d9\",\"license\":\"AGPL-3.0\"},\"src/token/interface/IOnStakeChange.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IOnStakeChange {\\n    function add(address account, uint256 amount) external;\\n\\n    function remove(address account, uint256 amount) external;\\n\\n    function move(address from, address to, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xb73017e0afe41fc34d5ce6382ae3f67bc08eaffeedcf7064ca4205e54035dc38\",\"license\":\"AGPL-3.0\"},\"src/token/interface/IReward.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IReward {\\n    function reward(address to, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xae796045d2b5cc17bb3799025ac0b02f4db432d625d7d52348702912a32091f1\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "storageLayout": {
    "storage": [
      {
        "astId": 225,
        "contract": "src/token/RewardsGenerator.sol:RewardsGenerator",
        "label": "_init",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 235,
        "contract": "src/token/RewardsGenerator.sol:RewardsGenerator",
        "label": "_global",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(GlobalState)232_storage"
      },
      {
        "astId": 247,
        "contract": "src/token/RewardsGenerator.sol:RewardsGenerator",
        "label": "_sharedRateRewardPerAccount",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(SharedRatePerAccount)242_storage)"
      },
      {
        "astId": 257,
        "contract": "src/token/RewardsGenerator.sol:RewardsGenerator",
        "label": "_fixedRateRewardPerAccount",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(FixedRatePerAccount)252_storage)"
      },
      {
        "astId": 261,
        "contract": "src/token/RewardsGenerator.sol:RewardsGenerator",
        "label": "_games",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(FixedRatePerAccount)252_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RewardsGenerator.FixedRatePerAccount)",
        "numberOfBytes": "32",
        "value": "t_struct(FixedRatePerAccount)252_storage"
      },
      "t_mapping(t_address,t_struct(SharedRatePerAccount)242_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RewardsGenerator.SharedRatePerAccount)",
        "numberOfBytes": "32",
        "value": "t_struct(SharedRatePerAccount)242_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(FixedRatePerAccount)252_storage": {
        "encoding": "inplace",
        "label": "struct RewardsGenerator.FixedRatePerAccount",
        "members": [
          {
            "astId": 249,
            "contract": "src/token/RewardsGenerator.sol:RewardsGenerator",
            "label": "toWithdraw",
            "offset": 0,
            "slot": "0",
            "type": "t_uint112"
          },
          {
            "astId": 251,
            "contract": "src/token/RewardsGenerator.sol:RewardsGenerator",
            "label": "lastTime",
            "offset": 14,
            "slot": "0",
            "type": "t_uint40"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(GlobalState)232_storage": {
        "encoding": "inplace",
        "label": "struct RewardsGenerator.GlobalState",
        "members": [
          {
            "astId": 227,
            "contract": "src/token/RewardsGenerator.sol:RewardsGenerator",
            "label": "lastUpdateTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 229,
            "contract": "src/token/RewardsGenerator.sol:RewardsGenerator",
            "label": "totalRewardPerPointAtLastUpdate",
            "offset": 5,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 231,
            "contract": "src/token/RewardsGenerator.sol:RewardsGenerator",
            "label": "totalPoints",
            "offset": 18,
            "slot": "0",
            "type": "t_uint112"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(SharedRatePerAccount)242_storage": {
        "encoding": "inplace",
        "label": "struct RewardsGenerator.SharedRatePerAccount",
        "members": [
          {
            "astId": 237,
            "contract": "src/token/RewardsGenerator.sol:RewardsGenerator",
            "label": "points",
            "offset": 0,
            "slot": "0",
            "type": "t_uint112"
          },
          {
            "astId": 239,
            "contract": "src/token/RewardsGenerator.sol:RewardsGenerator",
            "label": "totalRewardPerPointAccounted",
            "offset": 14,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 241,
            "contract": "src/token/RewardsGenerator.sol:RewardsGenerator",
            "label": "rewardsToWithdraw",
            "offset": 0,
            "slot": "1",
            "type": "t_uint112"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint104": {
        "encoding": "inplace",
        "label": "uint104",
        "numberOfBytes": "13"
      },
      "t_uint112": {
        "encoding": "inplace",
        "label": "uint112",
        "numberOfBytes": "14"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      }
    }
  },
  "userdoc": {
    "errors": {
      "NonTransferable()": [
        {
          "notice": "Token cannot be transfered"
        }
      ],
      "NotAuthorized()": [
        {
          "notice": "Not authorized to perform this operation"
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "notice": "trigger on approval amount being set.   Note that Transfer events need to be considered to compute the current allowance."
      },
      "Transfer(address,address,uint256)": {
        "notice": "trigger when tokens are transferred, including zero value transfers."
      }
    },
    "kind": "user",
    "methods": {
      "allowance(address,address)": {
        "notice": "Returns the amount which `spender` is still allowed to withdraw from `owner`."
      },
      "approve(address,uint256)": {
        "notice": "Allows `spender` to withdraw from your account multiple times, up to `amount`."
      },
      "balanceOf(address)": {
        "notice": "Returns the account balance of another account with address `owner`."
      },
      "claimFixedRewards(address)": {
        "notice": "claim the rewards earned so far using a fixed rate per point"
      },
      "claimSharedPoolRewards(address)": {
        "notice": "claim the rewards earned so far in the shared pool"
      },
      "decimals()": {
        "notice": "Returns the number of decimals the token uses."
      },
      "earnedFromFixedRate(address)": {
        "notice": "The amount of reward an account has accrued so far. Does not include already withdrawn rewards."
      },
      "earnedFromFixedRateMultipleAccounts(address[])": {
        "notice": "The amount of reward an account has accrued so far. Does not include already withdrawn rewards."
      },
      "earnedFromPoolRate(address)": {
        "notice": "The amount of reward an account has accrued so far. Does not include already withdrawn rewards."
      },
      "earnedFromPoolRateMultipleAccounts(address[])": {
        "notice": "The amount of reward an account has accrued so far. Does not include already withdrawn rewards."
      },
      "enableGame(address,uint256)": {
        "notice": "Allow a contract (a game) to add points to the rewards system"
      },
      "games(address)": {
        "notice": "return the weight of the game"
      },
      "getTotalRewardPerPointWithPrecision24()": {
        "notice": "The amount of reward each point has earned so far"
      },
      "global()": {
        "notice": "return the current global state"
      },
      "name()": {
        "notice": "Returns the name of the token."
      },
      "symbol()": {
        "notice": "Returns the symbol of the token."
      },
      "totalSupply()": {
        "notice": "Returns the total token supply."
      },
      "transfer(address,uint256)": {
        "notice": "Transfers `amount` of tokens to address `to`."
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfers `amount` tokens from address `from` to address `to`."
      },
      "update()": {
        "notice": "update the global pool rate"
      }
    },
    "version": 1
  },
  "argsData": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000",
  "transaction": {
    "hash": "0x3525dcca32d453f7fd5381fc4842f8e09863724dd65127ecf7ebe2913e5af57f",
    "origin": "0xbe19b59e8c588d68f475a407c7ba5fe813aeb792"
  },
  "receipt": {
    "confirmations": 0,
    "blockHash": "0xb585a42abbfa89c0e6b65c4ab0375973dc77a54da959608bd262d8b6f3108653",
    "blockNumber": "0xd282a0",
    "transactionIndex": "0xb"
  }
}