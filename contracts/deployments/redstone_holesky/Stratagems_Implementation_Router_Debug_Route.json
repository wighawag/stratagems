{
  "address": "0x44e419070174b4fcad020bb3b8330c4c2481f87a",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20WithIERC2612",
              "name": "tokens",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "burnAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "commitPhaseDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "revealPhaseDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "maxLife",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "numTokensPerGems",
              "type": "uint256"
            },
            {
              "internalType": "contract ITime",
              "name": "time",
              "type": "address"
            }
          ],
          "internalType": "struct UsingStratagemsTypes.Config",
          "name": "config",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CanStillReveal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CommitmentHashNotMatching",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GameNotStarted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InCommitmentPhase",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InRevealPhase",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCellOverwrite",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidEpoch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFurtherMoves",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "life",
          "type": "uint256"
        },
        {
          "internalType": "int32",
          "name": "x",
          "type": "int32"
        },
        {
          "internalType": "int32",
          "name": "y",
          "type": "int32"
        }
      ],
      "name": "InvalidLifeConfiguration",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAuthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NothingToReveal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PreviousCommitmentNotRevealed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "inReserve",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expected",
          "type": "uint256"
        }
      ],
      "name": "ReserveTooLow",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint24",
          "name": "epoch",
          "type": "uint24"
        }
      ],
      "name": "CommitmentCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint24",
          "name": "epoch",
          "type": "uint24"
        },
        {
          "indexed": false,
          "internalType": "bytes24",
          "name": "commitmentHash",
          "type": "bytes24"
        }
      ],
      "name": "CommitmentMade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint24",
          "name": "epoch",
          "type": "uint24"
        },
        {
          "indexed": true,
          "internalType": "bytes24",
          "name": "commitmentHash",
          "type": "bytes24"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "position",
              "type": "uint64"
            },
            {
              "internalType": "enum UsingStratagemsTypes.Color",
              "name": "color",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct UsingStratagemsTypes.Move[]",
          "name": "moves",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "bytes24",
          "name": "furtherMoves",
          "type": "bytes24"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newReserveAmount",
          "type": "uint256"
        }
      ],
      "name": "CommitmentRevealed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint24",
          "name": "epoch",
          "type": "uint24"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountBurnt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes24",
          "name": "furtherMoves",
          "type": "bytes24"
        }
      ],
      "name": "CommitmentVoid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "position",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint24",
              "name": "lastEpochUpdate",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "epochWhenTokenIsAdded",
              "type": "uint24"
            },
            {
              "internalType": "enum UsingStratagemsTypes.Color",
              "name": "color",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "life",
              "type": "uint8"
            },
            {
              "internalType": "int8",
              "name": "delta",
              "type": "int8"
            },
            {
              "internalType": "uint8",
              "name": "enemyMap",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct IStratagemsDebug.DebugCell[]",
          "name": "cells",
          "type": "tuple[]"
        }
      ],
      "name": "ForceCells",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "epoch",
          "type": "uint24"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "position",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "enum UsingStratagemsTypes.Color",
              "name": "color",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "life",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct IStratagemsDebug.SimpleCell[]",
          "name": "cells",
          "type": "tuple[]"
        }
      ],
      "name": "ForceSimpleCells",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "position",
          "type": "uint64"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum UsingStratagemsTypes.Color",
          "name": "oldColor",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum UsingStratagemsTypes.Color",
          "name": "newColor",
          "type": "uint8"
        }
      ],
      "name": "MoveProcessed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint24",
          "name": "epoch",
          "type": "uint24"
        },
        {
          "indexed": false,
          "internalType": "uint64[]",
          "name": "positions",
          "type": "uint64[]"
        }
      ],
      "name": "MultiPoke",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountDeposited",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        }
      ],
      "name": "ReserveDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountWithdrawn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        }
      ],
      "name": "ReserveWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint24",
          "name": "epoch",
          "type": "uint24"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "position",
          "type": "uint64"
        }
      ],
      "name": "SinglePoke",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "position",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint24",
              "name": "lastEpochUpdate",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "epochWhenTokenIsAdded",
              "type": "uint24"
            },
            {
              "internalType": "enum UsingStratagemsTypes.Color",
              "name": "color",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "life",
              "type": "uint8"
            },
            {
              "internalType": "int8",
              "name": "delta",
              "type": "int8"
            },
            {
              "internalType": "uint8",
              "name": "enemyMap",
              "type": "uint8"
            }
          ],
          "internalType": "struct IStratagemsDebug.DebugCell[]",
          "name": "cells",
          "type": "tuple[]"
        }
      ],
      "name": "forceCells",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "position",
              "type": "uint64"
            },
            {
              "internalType": "enum UsingStratagemsTypes.Color",
              "name": "color",
              "type": "uint8"
            }
          ],
          "internalType": "struct UsingStratagemsTypes.Move[]",
          "name": "moves",
          "type": "tuple[]"
        }
      ],
      "name": "forceMoves",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "position",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "enum UsingStratagemsTypes.Color",
              "name": "color",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "life",
              "type": "uint8"
            }
          ],
          "internalType": "struct IStratagemsDebug.SimpleCell[]",
          "name": "cells",
          "type": "tuple[]"
        }
      ],
      "name": "forceSimpleCells",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getRawCell",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint24",
              "name": "lastEpochUpdate",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "epochWhenTokenIsAdded",
              "type": "uint24"
            },
            {
              "internalType": "enum UsingStratagemsTypes.Color",
              "name": "color",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "life",
              "type": "uint8"
            },
            {
              "internalType": "int8",
              "name": "delta",
              "type": "int8"
            },
            {
              "internalType": "uint8",
              "name": "enemyMap",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "distribution",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "stake",
              "type": "uint8"
            }
          ],
          "internalType": "struct UsingStratagemsTypes.Cell",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "contractName": "StratagemsDebug",
  "sourceName": "src/game/debug/StratagemsDebug.sol",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80632779347e14610051578063cd315b0814610066578063d703f50a1461008f578063df971134146100a2575b600080fd5b61006461005f3660046149fc565b6100b5565b005b610079610074366004614ad7565b61029d565b6040516100869190614b5a565b60405180910390f35b61006461009d366004614bf5565b6103b9565b6100646100b0366004614cef565b610da8565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461013b576040517fea8e4eb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080610146611136565b91509150801561015e578161015a81614e49565b9250505b600083517f000000000000000000000000000000000000000000000000000000000000000061018d9190614e86565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018290529091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906323b872dd906064016020604051808303816000875af1158015610229573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024d9190614e9d565b5073ffffffffffffffffffffffffffffffffffffffff851660009081526002602052604081208054839290610283908490614ec6565b90915550610295905085848633611281565b505050505050565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081019190915260008281526020818152604091829020825161010081018452815462ffffff8082168352630100000082041693820193909352929091908301906601000000000000900460ff16600681111561033657610336614af0565b600681111561034757610347614af0565b8152905460ff67010000000000000082048116602084015268010000000000000000820460000b604084015269010000000000000000008204811660608401526a01000000000000000000008204811660808401526b0100000000000000000000009091041660a09091015292915050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461043f576040517fea8e4eb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610449611136565b50905060005b825181101561085e57600083828151811061046c5761046c614ed9565b602090810291909101810151805167ffffffffffffffff1660009081529182905260409091205490915062ffffff16156104d2576040517ff9e4d84a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201527f000000000000000000000000000000000000000000000000000000000000000060448201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906323b872dd906064016020604051808303816000875af115801561058a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ae9190614e9d565b506000806105c583600001518460400151876117bb565b915091506040518061010001604052808662ffffff1681526020018662ffffff1681526020018460400151600681111561060157610601614af0565b815260608086015160ff908116602080850191909152600087810b6040808701919091529287169385019390935260808401839052600160a090940193909352865167ffffffffffffffff16825281835290819020835181549385015162ffffff9081166301000000027fffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000090951691161792909217808355908301519082907fffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffff1666010000000000008360068111156106dc576106dc614af0565b021790555060608201518154608084015160a085015160c086015160e0909601517fffffffffffffffffffffffffffffffffffffffffffffff0000ffffffffffffff90931667010000000000000060ff958616027fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff16176801000000000000000092851692909202919091177fffffffffffffffffffffffffffffffffffffffffff0000ffffffffffffffffff166901000000000000000000918416919091027fffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffff16176a010000000000000000000094831694909402939093177fffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffff166b01000000000000000000000091909316029190911790555050602081810151915167ffffffffffffffff16600090815260019091526040902073ffffffffffffffffffffffffffffffffffffffff90911690558061085681614f08565b91505061044f565b5060005b8251811015610d6a57600083828151811061087f5761087f614ed9565b6020908102919091018101515167ffffffffffffffff1660008181528083526040808220815161010081018352815462ffffff80821683526301000000820416968201969096529395509193908301906601000000000000900460ff1660068111156108ed576108ed614af0565b60068111156108fe576108fe614af0565b8152905460ff670100000000000000820481166020840152680100000000000000008204600090810b604085015269010000000000000000008304821660608501526a0100000000000000000000830482166080808601919091526b01000000000000000000000090930490911660a09093019290925282015191925090810b81036109aa577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6109b0565b81608001515b905060008160000b1280156109ca575060a082015160ff16155b156109d3575060005b60008160000b836060015160ff166109eb9190614f40565b905060008112156109fa575060005b7f000000000000000000000000000000000000000000000000000000000000000060ff16811115610a80576040517fa21143880000000000000000000000000000000000000000000000000000000081526004810182905263ffffffff8516600381810b6024840152602087901c9081900b604484015290916064015b60405180910390fd5b60ff8116606084015260408051610100810190915260009080610aa460018a614f60565b62ffffff168152602001610ab960018a614f60565b62ffffff16815260200185604001516006811115610ad957610ad9614af0565b815260608087015160ff9081166020808501919091526080808a0151600090810b60408088019190915260a0808d0151909516958701959095529085018190526001929094019190915288835282815291819020835181549385015162ffffff9081166301000000027fffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000909516911617929092178083559083015192935083929082907fffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffff166601000000000000836006811115610bb857610bb8614af0565b021790555060608201518154608084015160a085015160c086015160e0909601517fffffffffffffffffffffffffffffffffffffffffffffff0000ffffffffffffff90931667010000000000000060ff958616027fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff16176801000000000000000092851692909202919091177fffffffffffffffffffffffffffffffffffffffffff0000ffffffffffffffffff166901000000000000000000918416919091027fffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffff16176a010000000000000000000094831694909402939093177fffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffff166b0100000000000000000000009190931602919091179055610d526000610cff62ffffff8a16611d8d565b604051602001610d0f9190614fa0565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291815260008981526001602052205488908590611e4b565b50505050508080610d6290614f08565b915050610862565b507f8e1d006b2d362a7e606e2a6f90b3faefd938725a74cfe85918c68a8d67d625ec8183604051610d9c929190614fe5565b60405180910390a15050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e2e576040517fea8e4eb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b81518110156110fb576000828281518110610e4e57610e4e614ed9565b60200260200101519050604051806101000160405280826040015162ffffff168152602001826060015162ffffff16815260200182608001516006811115610e9857610e98614af0565b815260a08084015160ff90811660208085019190915260c0860151600090810b60408087019190915260e088015190931660608601526080850181905260019390940192909252845167ffffffffffffffff16835282825291829020835181549285015162ffffff9081166301000000027fffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000009094169116179190911780825591830151909182907fffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffff166601000000000000836006811115610f7b57610f7b614af0565b021790555060608201518154608084015160a085015160c086015160e0909601517fffffffffffffffffffffffffffffffffffffffffffffff0000ffffffffffffff90931667010000000000000060ff958616027fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff16176801000000000000000092851692909202919091177fffffffffffffffffffffffffffffffffffffffffff0000ffffffffffffffffff166901000000000000000000918416919091027fffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffff16176a010000000000000000000094831694909402939093177fffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffff166b0100000000000000000000009190931602919091179055602081810151915167ffffffffffffffff16600090815260019091526040902073ffffffffffffffffffffffffffffffffffffffff9091169055806110f381614f08565b915050610e31565b507f3c0a1b33060cb27164a8675b8ef0947a312efd921ef674321eb29f0dcbf638768160405161112b9190615082565b60405180910390a150565b600080806111847f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000614ec6565b90506000611190612296565b90507f00000000000000000000000000000000000000000000000000000000000000008110156111ec576040517f3a5f7b5700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006112187f000000000000000000000000000000000000000000000000000000000000000083615159565b9050611224838261519b565b61122f906002614ec6565b94507f00000000000000000000000000000000000000000000000000000000000000008361125e600288614f60565b62ffffff1661126d9190614e86565b6112779083615159565b1093505050509091565b60008060405180604001604052808551600561129d9190614e86565b67ffffffffffffffff8111156112b5576112b56148c3565b6040519080825280602002602001820160405280156112fa57816020015b60408051808201909152600080825260208201528152602001906001900390816112d35790505b5081526020016000815250905061132b60405180606001604052806000815260200160008152602001600081525090565b60005b85518110156113c2576000806000611361868c8c8c888151811061135457611354614ed9565b602002602001015161236c565b92509250925082856000018181516113799190614ec6565b905250602085018051839190611390908390614ec6565b9052506040850180518291906113a7908390614ec6565b9052508392506113ba9150829050614f08565b91505061132e565b5061140460006040518060400160405280600c81526020017f7265736f6c76654d6f766573000000000000000000000000000000000000000081525084612a96565b61142e7f000000000000000000000000000000000000000000000000000000000000000083612cb2565b73ffffffffffffffffffffffffffffffffffffffff871660009081526002602090815260409091205490820151825191945061146991614ec6565b8310156114bd5760208101518151849161148291614ec6565b6040517f78fe52a600000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610a77565b73ffffffffffffffffffffffffffffffffffffffff841661152257602081015181516114e99190614ec6565b6114f39084615159565b73ffffffffffffffffffffffffffffffffffffffff8816600090815260026020526040902081905592506116e4565b8051156115ef5780516040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483015230602483015260448201929092527f0000000000000000000000000000000000000000000000000000000000000000909116906323b872dd906064016020604051808303816000875af11580156115c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ed9190614e9d565b505b6020810151156116e45760208101516040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301527f00000000000000000000000000000000000000000000000000000000000000008116602483015260448201929092527f0000000000000000000000000000000000000000000000000000000000000000909116906323b872dd906064016020604051808303816000875af11580156116be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e29190614e9d565b505b6040810151156117b15760408181015190517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff898116600483015260248201929092527f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb906044016020604051808303816000875af115801561178b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117af9190614e9d565b505b5050949350505050565b600080806117f467ffffffffffffffff8716827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff612dba565b67ffffffffffffffff8116600090815260208181526040808320815161010081018352815462ffffff808216835263010000008204169482019490945294955092939291908301906601000000000000900460ff16600681111561185a5761185a614af0565b600681111561186b5761186b614af0565b8152905460ff670100000000000000820481166020840152680100000000000000008204600090810b604085015269010000000000000000008304821660608501526a01000000000000000000008304821660808501526b0100000000000000000000009092041660a090920191909152909150816040015160068111156118f5576118f5614af0565b1461193c57600061190a878360400151612e0a565b905060008160000b121561191f578360011793505b80850194506119398383846060015189600260008d612ea7565b50505b506000905061197667ffffffffffffffff87167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83612dba565b67ffffffffffffffff8116600090815260208181526040808320815161010081018352815462ffffff808216835263010000008204169482019490945294955092939291908301906601000000000000900460ff1660068111156119dc576119dc614af0565b60068111156119ed576119ed614af0565b8152905460ff670100000000000000820481166020840152680100000000000000008204600090810b604085015269010000000000000000008304821660608501526a01000000000000000000008304821660808501526b0100000000000000000000009092041660a09092019190915290915081604001516006811115611a7757611a77614af0565b14611abe576000611a8c878360400151612e0a565b905060008160000b1215611aa1578360021793505b8085019450611abb8383846060015189600360008d612ea7565b50505b5060009050611ad967ffffffffffffffff8716826001612dba565b67ffffffffffffffff8116600090815260208181526040808320815161010081018352815462ffffff808216835263010000008204169482019490945294955092939291908301906601000000000000900460ff166006811115611b3f57611b3f614af0565b6006811115611b5057611b50614af0565b8152905460ff670100000000000000820481166020840152680100000000000000008204600090810b604085015269010000000000000000008304821660608501526a01000000000000000000008304821660808501526b0100000000000000000000009092041660a09092019190915290915081604001516006811115611bda57611bda614af0565b14611c20576000611bef878360400151612e0a565b905060008160000b1215611c04578360041793505b8085019450611c1d83838460600151896000808d612ea7565b50505b5060009050611c3b67ffffffffffffffff8716600183612dba565b67ffffffffffffffff8116600090815260208181526040808320815161010081018352815462ffffff808216835263010000008204169482019490945294955092939291908301906601000000000000900460ff166006811115611ca157611ca1614af0565b6006811115611cb257611cb2614af0565b8152905460ff670100000000000000820481166020840152680100000000000000008204600090810b604085015269010000000000000000008304821660608501526a01000000000000000000008304821660808501526b0100000000000000000000009092041660a09092019190915290915081604001516006811115611d3c57611d3c614af0565b14611d83576000611d51878360400151612e0a565b905060008160000b1215611d66578360081793505b8085019450611d808383846060015189600160008d612ea7565b50505b5050935093915050565b60606000611d9a836133c7565b600101905060008167ffffffffffffffff811115611dba57611dba6148c3565b6040519080825280601f01601f191660200182016040528015611de4576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084611dee57509392505050565b600060ff861615611f1d578560ff16600114611ee2578560ff16600214611ea7576040518060400160405280600c81526020017f2020202020202020202020200000000000000000000000000000000000000000815250611f2e565b6040518060400160405280600881526020017f2020202020202020000000000000000000000000000000000000000000000000815250611f2e565b6040518060400160405280600481526020017f2020202000000000000000000000000000000000000000000000000000000000815250611f2e565b604051806020016040528060008152505b9050611f706040518060400160405280600481526020017f257325730000000000000000000000000000000000000000000000000000000081525082876134a9565b6040805160608101909152603f80825263ffffffff86811692602088811c90921692611fa392615878908301398461353c565b611ffa6040518060400160405280600e81526020017f257363656c6c202825732c25732900000000000000000000000000000000000081525084611fe98560030b6135d1565b611ff58560030b6135d1565b61365f565b61201c6040518060600160405280603f8152602001615878603f91398461353c565b6120656040518060400160405280601981526020017f2573202d206c61737445706f63685570646174653a202025730000000000000081525084876000015162ffffff166136f4565b6120ae6040518060400160405280601f81526020017f2573202d2065706f63685768656e546f6b656e497341646465643a202025730081525084876020015162ffffff166136f4565b6121066040518060400160405280600f81526020017f2573202d20636f6c6f723a20202573000000000000000000000000000000000081525084876040015160068111156120fe576120fe614af0565b60ff166136f4565b61214d6040518060400160405280600e81526020017f2573202d206c6966653a2020257300000000000000000000000000000000000081525084876060015160ff166136f4565b6121946040518060400160405280601681526020017f2573202d20646973747269627574696f6e3a2020257300000000000000000000815250848760c0015160ff166136f4565b6121d46040518060400160405280600f81526020017f2573202d206f776e65723a2020257300000000000000000000000000000000008152508486613787565b6122236040518060400160405280600e81526020017f2573202d2064656c74613a2025730000000000000000000000000000000000008152508461221e886080015160000b6135d1565b6134a9565b61226a6040518060400160405280601281526020017f2573202d20656e656d794d61703a202025730000000000000000000000000000815250848760a0015160ff166136f4565b61228c6040518060600160405280603f8152602001615878603f91398461353c565b5050505050505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166122d857504290565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b80777ea6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612343573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236791906151af565b905090565b60008060008061238085600001518761381a565b90506123f660006123958862ffffff16611d8d565b6040516020016123a591906151c8565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152918152885167ffffffffffffffff81166000908152600160205291909120548590611e4b565b60c0810151606082015160ff161580156124155750815162ffffff1615155b15612444576124278260a0015161399e565b60048360a0015160ff16901b61243d919061520d565b6000835290505b60008660200151600681111561245c5761245c614af0565b03612570577f000000000000000000000000000000000000000000000000000000000000000060ff16826060015160ff161415806124e15750855167ffffffffffffffff1660009081526001602052604090205473ffffffffffffffffffffffffffffffffffffffff89169073ffffffffffffffffffffffffffffffffffffffff1614155b15612517576000807f00000000000000000000000000000000000000000000000000000000000000009450945094505050612a8c565b61256b8960405180604001604052808b73ffffffffffffffffffffffffffffffffffffffff1681526020017f00000000000000000000000000000000000000000000000000000000000000008152506139d0565b6125cf565b8662ffffff16826020015162ffffff16036125cf57606082015160ff161561259e57600660208701526125cf565b6000807f00000000000000000000000000000000000000000000000000000000000000009450945094505050612a8c565b6000806125e88b898b8760400151878960e00151613b22565b915091508973ffffffffffffffffffffffffffffffffffffffff16886000015167ffffffffffffffff167f17b85ded3fb12432ee427abc34a3026e1fbbb8bc431e3dbe51bc81215655c25c86604001518b6020015160405161264b929190615226565b60405180910390a387602001518460400190600681111561266e5761266e614af0565b9081600681111561268157612681614af0565b905250600060c0850181905262ffffff8a166020860152846040015160068111156126ae576126ae614af0565b036127145760006060850181905260e085018190528085526080850181905260a08501819052885167ffffffffffffffff168152600160205260408120557f0000000000000000000000000000000000000000000000000000000000000000945061283c565b60ff811660a08501527f0000000000000000000000000000000000000000000000000000000000000000965060068460400151600681111561275857612758614af0565b14801561276b5750606084015160ff1615155b156127945760e08401805160010160ff169081905260000361278f5760ff60e08501525b61279c565b600160e08501525b600082900b60808501526001606085015262ffffff891684526006846040015160068111156127cd576127cd614af0565b0361280857875167ffffffffffffffff16600090815260016020526040902073ffffffffffffffffffffffffffffffffffffffff905561283c565b875167ffffffffffffffff16600090815260016020526040902073ffffffffffffffffffffffffffffffffffffffff8b1690555b875167ffffffffffffffff1660009081526020818152604091829020865181549288015162ffffff9081166301000000027fffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000009094169116179190911780825591860151869282907fffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffff1666010000000000008360068111156128df576128df614af0565b021790555060608201518154608084015160a085015160c086015160e0909601517fffffffffffffffffffffffffffffffffffffffffffffff0000ffffffffffffff90931667010000000000000060ff958616027fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff16176801000000000000000092851692909202919091177fffffffffffffffffffffffffffffffffffffffffff0000ffffffffffffffffff166901000000000000000000918416919091027fffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffff16176a010000000000000000000094831694909402939093177fffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffff166b0100000000000000000000009190931602919091179055612a876000612a2662ffffff8c16611d8d565b604051602001612a369190615241565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181528b5167ffffffffffffffff81166000908152600160205291909120548890611e4b565b505050505b9450945094915050565b600060ff841615612b68578360ff16600114612b2d578360ff16600214612af2576040518060400160405280600c81526020017f2020202020202020202020200000000000000000000000000000000000000000815250612b79565b6040518060400160405280600881526020017f2020202020202020000000000000000000000000000000000000000000000000815250612b79565b6040518060400160405280600481526020017f2020202000000000000000000000000000000000000000000000000000000000815250612b79565b604051806020016040528060008152505b9050612bbb6040518060400160405280600481526020017f257325730000000000000000000000000000000000000000000000000000000081525082856134a9565b612bdd6040518060600160405280603f8152602001615878603f91398261353c565b60005b8260200151811015612c8957612c776040518060400160405280601281526020017f25737472616e73666572202825732c25732900000000000000000000000000008152508385600001518481518110612c3c57612c3c614ed9565b602002602001015160000151612c7287600001518681518110612c6157612c61614ed9565b602002602001015160200151611d8d565b613cd2565b80612c8181614f08565b915050612be0565b50612cac6040518060600160405280603f8152602001615878603f91398261353c565b50505050565b60005b8160200151811015612db5578273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83600001518381518110612cf357612cf3614ed9565b60200260200101516000015184600001518481518110612d1557612d15614ed9565b6020026020010151602001516040518363ffffffff1660e01b8152600401612d5f92919073ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b6020604051808303816000875af1158015612d7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612da29190614e9d565b5080612dad81614f08565b915050612cb5565b505050565b6000612dcc8363ffffffff8616615286565b9250612de28263ffffffff602087901c16615286565b9150612e0263ffffffff841667ffffffff00000000602085901b166152c8565b949350505050565b600080836006811115612e1f57612e1f614af0565b14158015612e3f57506000826006811115612e3c57612e3c614af0565b14155b15612e9d57816006811115612e5657612e56614af0565b836006811115612e6857612e68614af0565b14612e93577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff612e96565b60015b9050612ea1565b5060005b92915050565b600080876060015160ff16118015612ec0575060ff8616155b15612ef157612ed28760a0015161399e565b60048860a0015160ff16901b612ee8919061520d565b60ff1660c08801525b612f606000612f028660ff16611d8d565b604051602001612f1291906152e9565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291815267ffffffffffffffff8c166000908152600160205220548b908b90611e4b565b612f6b84600261544e565b612f7685600261544e565b60c089015160041c16600f1603612ff2578660c00151600f168760e00151600c612fa0919061545d565b612faa9190615479565b60ff1690508660c00151600f1660048560ff166002612fc9919061549b565b1960048a60c0015160ff16901c60ff161660ff16901b612fe9919061520d565b60ff1660c08801525b81600681111561300457613004614af0565b83600681111561301657613016614af0565b146131b257600082600681111561302f5761302f614af0565b036130b65782600681111561304657613046614af0565b8760400151600681111561305c5761305c614af0565b0361307f5760018760800181815161307491906154a7565b60000b9052506131b2565b60018760800181815161309291906154e6565b60000b90525060a087018051600160ff8781169190911b81189091161690526131b2565b8260068111156130c8576130c8614af0565b876040015160068111156130de576130de614af0565b0361310f5760a087018051600160ff8781169190911b909117169052608087018051600291906130749083906154a7565b81600681111561312157613121614af0565b8760400151600681111561313757613137614af0565b0361316857600083600681111561315057613150614af0565b1461307f5760028760800181815161309291906154e6565b600083600681111561317c5761317c614af0565b036131b25760018760800181815161319491906154a7565b60000b90525060a087018051600160ff8781169190911b9091171690525b62ffffff8516875260ff80871660608901526131e6906000906131d6908716611d8d565b604051602001612f129190615525565b67ffffffffffffffff88166000908152602081815260409182902089518154928b015162ffffff9081166301000000027fffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000009094169116179190911780825591890151899282907fffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffff16660100000000000083600681111561328857613288614af0565b021790555060608201518154608084015160a085015160c086015160e0909601517fffffffffffffffffffffffffffffffffffffffffffffff0000ffffffffffffff90931667010000000000000060ff958616027fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff16176801000000000000000092851692909202919091177fffffffffffffffffffffffffffffffffffffffffff0000ffffffffffffffffff166901000000000000000000918416919091027fffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffff16176a010000000000000000000094831694909402939093177fffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffff166b0100000000000000000000009190931602919091179055979650505050505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310613410577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef8100000000831061343c576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061345a57662386f26fc10000830492506010015b6305f5e1008310613472576305f5e100830492506008015b612710831061348657612710830492506004015b60648310613498576064830492506002015b600a8310612ea15760010192915050565b612db58383836040516024016134c1939291906155da565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f2ced7cef00000000000000000000000000000000000000000000000000000000179052613d63565b6135cd828260405160240161355292919061561d565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f4b5c427700000000000000000000000000000000000000000000000000000000179052613d63565b5050565b6060600082126135f05760405180602001604052806000815250613627565b6040518060400160405280600181526020017f2d000000000000000000000000000000000000000000000000000000000000008152505b61363861363384613d6f565b611d8d565b60405160200161364992919061564b565b6040516020818303038152906040529050919050565b612cac84848484604051602401613679949392919061567a565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fde68f20a00000000000000000000000000000000000000000000000000000000179052613d63565b612db583838360405160240161370c939291906156c7565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f5821efa100000000000000000000000000000000000000000000000000000000179052613d63565b612db583838360405160240161379f939291906156fd565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f95ed019500000000000000000000000000000000000000000000000000000000179052613d63565b60408051610100808201835260008083526020808401829052838501829052606084018290526080840182905260a0840182905260c0840182905260e0840182905267ffffffffffffffff871682528181529084902084519283018552805462ffffff808216855263010000008204169284019290925292939192918301906601000000000000900460ff1660068111156138b7576138b7614af0565b60068111156138c8576138c8614af0565b8152905460ff67010000000000000082048116602084015268010000000000000000820460000b60408401526901000000000000000000820481166060808501919091526a0100000000000000000000830482166080808601919091526b01000000000000000000000090930490911660a0909301929092528251908301519183015192935091600162ffffff841610801590613968575060008160ff16115b1561399557600080613981858760a0015186868b613d86565b60ff909116606088015262ffffff16865250505b50505092915050565b60005b60ff8216156139cb576139b5600183615749565b90911690806139c381615762565b9150506139a1565b919050565b60005b8260200151811015613a8257816000015173ffffffffffffffffffffffffffffffffffffffff1683600001518281518110613a1057613a10614ed9565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1603613a705760208201518351805183908110613a5057613a50614ed9565b6020026020010151602001818151613a689190614ec6565b905250505050565b80613a7a81614f08565b9150506139d3565b5080518251602084015181518110613a9c57613a9c614ed9565b60200260200101516000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080602001518260000151836020015181518110613af957613af9614ed9565b60200260200101516020018181525050816020018051809190613b1b90614f08565b9052505050565b600080600080600080613b408b600001518b8b8e602001518c613fb8565b935093509350935060008261ffff161115613be457613be48c6040518060400160405280613b888f6000015167ffffffffffffffff1660009081526001602052604090205490565b73ffffffffffffffffffffffffffffffffffffffff168152602001600c613bd37f000000000000000000000000000000000000000000000000000000000000000061ffff8916614e86565b613bdd919061519b565b90526139d0565b60005b60048160ff161015613cbf5760008260ff831660048110613c0a57613c0a614ed9565b602002015173ffffffffffffffffffffffffffffffffffffffff1614613cad57613cad8d6040518060400160405280858560ff1660048110613c4e57613c4e614ed9565b602002015173ffffffffffffffffffffffffffffffffffffffff1681526020018c600f1660ff167f0000000000000000000000000000000000000000000000000000000000000000613ca0919061519b565b613bdd9060ff8e16614e86565b80613cb781615762565b915050613be7565b50929b919a509098505050505050505050565b612cac84848484604051602401613cec9493929190615781565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167feb1bff80000000000000000000000000000000000000000000000000000000001790525b613d6c816144cf565b50565b600080821215613d825781600003612ea1565b5090565b600085600162ffffff821610801590613da2575060008460ff16115b15613fae576000613db38885614f60565b62ffffff1690508015613fa55760008660000b600003613df3577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff613df5565b865b905060008160000b128015613e0b575060ff8816155b15613e14575060005b60008160000b1315613ef657600081600181613e508a7f0000000000000000000000000000000000000000000000000000000000000000615749565b613e5a919061520d565b613e649190615749565b613e6e9190615479565b90508060ff16831115613e82578060ff1692505b613e8c828461545d565b613e96908861520d565b96507f000000000000000000000000000000000000000000000000000000000000000060ff168760ff161115613eea577f000000000000000000000000000000000000000000000000000000000000000096505b86945085935050613f9f565b60008160000b1215613f98576000613f0d826157d6565b6001613f18846157d6565b613f22908a61520d565b613f2c9190615749565b613f369190615479565b90508060ff16831115613f4a578060ff1692505b6000613f55836157d6565b613f5f908561545d565b90508760ff168160ff161115613f785760009550613f85565b613f828189615749565b95505b613f8f848c615814565b94505050613f9f565b8593508492505b50613fac565b8492508791505b505b9550959350505050565b6000806000613fc5614881565b6140046040518060400160405280600481526020017f66726f6d000000000000000000000000000000000000000000000000000000008152508a6144f0565b60408051808201909152601281527f646973747269627574696f6e2025692025690000000000000000000000000000602082015261404d90600f600488901c811690881661454c565b6000808061408667ffffffffffffffff8d16827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff612dba565b90506140c76040518060400160405280600a81526020017f7570506f736974696f6e00000000000000000000000000000000000000000000815250826144f0565b6140d5818c60028d8d6145df565b9093509150600083810b12156140ec578560011795505b938101936001600489901c81169003614174576141416040518060400160405280600d81526020017f7570506f736974696f6e202569000000000000000000000000000000000000008152508960ff166147f0565b67ffffffffffffffff811660009081526001602052604090205473ffffffffffffffffffffffffffffffffffffffff1684525b509481019460006141b067ffffffffffffffff8d167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83612dba565b90506141f16040518060400160405280600c81526020017f6c656674506f736974696f6e0000000000000000000000000000000000000000815250826144f0565b6141ff818c60038d8d6145df565b9093509150600083810b1215614216578560021795505b938101936002600489901c811690036142a15761426b6040518060400160405280600f81526020017f6c656674506f736974696f6e20256900000000000000000000000000000000008152508960ff166147f0565b67ffffffffffffffff811660009081526001602052604090205473ffffffffffffffffffffffffffffffffffffffff1660208501525b509481019460006142be67ffffffffffffffff8d16826001612dba565b90506142ff6040518060400160405280600c81526020017f646f776e506f736974696f6e0000000000000000000000000000000000000000815250826144f0565b61430d818c60008d8d6145df565b9093509150600083810b1215614324578560041795505b93810193600488811c811690036143ad576143776040518060400160405280600f81526020017f646f776e506f736974696f6e20256900000000000000000000000000000000008152508960ff166147f0565b67ffffffffffffffff811660009081526001602052604090205473ffffffffffffffffffffffffffffffffffffffff1660408501525b509481019460006143ca67ffffffffffffffff8d16600183612dba565b905061440b6040518060400160405280600d81526020017f7269676874506f736974696f6e00000000000000000000000000000000000000815250826144f0565b614419818c60018d8d6145df565b9093509150600083810b1215614430578560081795505b938101936008600489901c811690036144bb576144856040518060400160405280601081526020017f7269676874506f736974696f6e202569000000000000000000000000000000008152508960ff166147f0565b67ffffffffffffffff811660009081526001602052604090205473ffffffffffffffffffffffffffffffffffffffff1660608501525b828701965050505095509550955095915050565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b60008063ffffffff80841690602085901c1691509150612cac6040518060400160405280600b81526020017f25733a202825732c25732900000000000000000000000000000000000000000081525085611fe98560030b6135d1565b612db583838360405160240161456493929190615830565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fca47c4eb00000000000000000000000000000000000000000000000000000000179052613d63565b67ffffffffffffffff8516600090815260208181526040808320815161010081018352815462ffffff8082168352630100000082041694820194909452849384939192918301906601000000000000900460ff16600681111561464457614644614af0565b600681111561465557614655614af0565b8152905460ff670100000000000000820481166020840152680100000000000000008204600090810b60408086019190915269010000000000000000008404831660608601526a01000000000000000000008404831660808601526b01000000000000000000000090930490911660a09093019290925282519083015192935091908160068111156146e9576146e9614af0565b146147435785600681111561470057614700614af0565b81600681111561471257614712614af0565b1461473d577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff614740565b60015b94505b60018262ffffff161015801561476b5750600081600681111561476857614768614af0565b14155b156147e3576000836060015160ff1611801561479057508862ffffff168262ffffff16105b156147cd576000806147b1848660a00151876080015188606001518f613d86565b915091506147c48c8684848e8e8e612ea7565b955050506147e3565b6147e08a8485606001518c8c8c8c612ea7565b93505b5050509550959350505050565b6135cd8282604051602401614806929190615855565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fb60e72cc00000000000000000000000000000000000000000000000000000000179052613d63565b60405180608001604052806004906020820280368337509192915050565b803573ffffffffffffffffffffffffffffffffffffffff811681146139cb57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715614915576149156148c3565b60405290565b6040516080810167ffffffffffffffff81118282101715614915576149156148c3565b604051610100810167ffffffffffffffff81118282101715614915576149156148c3565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156149a9576149a96148c3565b604052919050565b600067ffffffffffffffff8211156149cb576149cb6148c3565b5060051b60200190565b803567ffffffffffffffff811681146139cb57600080fd5b8035600781106139cb57600080fd5b6000806040808486031215614a1057600080fd5b614a198461489f565b925060208085013567ffffffffffffffff811115614a3657600080fd5b8501601f81018713614a4757600080fd5b8035614a5a614a55826149b1565b614962565b81815260069190911b82018301908381019089831115614a7957600080fd5b928401925b82841015614ac75785848b031215614a965760008081fd5b614a9e6148f2565b614aa7856149d5565b8152614ab48686016149ed565b8187015282529285019290840190614a7e565b8096505050505050509250929050565b600060208284031215614ae957600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60078110614b56577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b60006101008201905062ffffff808451168352806020850151166020840152506040830151614b8c6040840182614b1f565b5060ff6060840151166060830152608083015160000b608083015260ff60a08401511660a083015260c0830151614bc860c084018260ff169052565b5060e0830151614bdd60e084018260ff169052565b5092915050565b803560ff811681146139cb57600080fd5b60006020808385031215614c0857600080fd5b823567ffffffffffffffff811115614c1f57600080fd5b8301601f81018513614c3057600080fd5b8035614c3e614a55826149b1565b81815260079190911b82018301908381019087831115614c5d57600080fd5b928401925b82841015614cd15760808489031215614c7b5760008081fd5b614c8361491b565b614c8c856149d5565b8152614c9986860161489f565b868201526040614caa8187016149ed565b908201526060614cbb868201614be4565b9082015282526080939093019290840190614c62565b979650505050505050565b803562ffffff811681146139cb57600080fd5b60006020808385031215614d0257600080fd5b823567ffffffffffffffff811115614d1957600080fd5b8301601f81018513614d2a57600080fd5b8035614d38614a55826149b1565b81815260089190911b82018301908381019087831115614d5757600080fd5b928401925b82841015614cd1576101008489031215614d765760008081fd5b614d7e61493e565b614d87856149d5565b8152614d9486860161489f565b868201526040614da5818701614cdc565b908201526060614db6868201614cdc565b908201526080614dc78682016149ed565b9082015260a0614dd8868201614be4565b9082015260c085810135600081810b8214614df1578081fd5b509082015260e0614e03868201614be4565b908201528252610100939093019290840190614d5c565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062ffffff821680614e5e57614e5e614e1a565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0192915050565b8082028115828204841417612ea157612ea1614e1a565b600060208284031215614eaf57600080fd5b81518015158114614ebf57600080fd5b9392505050565b80820180821115612ea157612ea1614e1a565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614f3957614f39614e1a565b5060010190565b8181036000831280158383131683831282161715614bdd57614bdd614e1a565b62ffffff828116828216039080821115614bdd57614bdd614e1a565b60005b83811015614f97578181015183820152602001614f7f565b50506000910152565b7f666f72636553696d706c6543656c6c732061742065706f636820000000000000815260008251614fd881601a850160208701614f7c565b91909101601a0192915050565b6000604080830162ffffff861684526020828186015281865180845260609350838701915082880160005b8281101561507357815167ffffffffffffffff815116855273ffffffffffffffffffffffffffffffffffffffff8682015116868601528781015161505689870182614b1f565b5086015160ff168487015260809093019290840190600101615010565b50919998505050505050505050565b602080825282518282018190526000919060409081850190868401855b8281101561514c57815167ffffffffffffffff815116855273ffffffffffffffffffffffffffffffffffffffff87820151168786015262ffffff8682015116868601526060808201516150f88288018262ffffff169052565b505060808082015161510c82880182614b1f565b505060a08181015160ff169086015260c080820151600081900b82880152505060e09081015160ff1690850152610100909301929085019060010161509f565b5091979650505050505050565b81810381811115612ea157612ea1614e1a565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826151aa576151aa61516c565b500490565b6000602082840312156151c157600080fd5b5051919050565b7f5f636f6d707574654d6f76652061742065706f63682000000000000000000000815260008251615200816016850160208701614f7c565b9190910160160192915050565b60ff8181168382160190811115612ea157612ea1614e1a565b604081016152348285614b1f565b614ebf6020830184614b1f565b7f4146544552200000000000000000000000000000000000000000000000000000815260008251615279816006850160208701614f7c565b9190910160060192915050565b600381810b9083900b01637fffffff81137fffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000082121715612ea157612ea1614e1a565b67ffffffffffffffff818116838216019080821115614bdd57614bdd614e1a565b7f5f75706461746543656c6c46726f6d4e65696768626f722020696e646578000081526000825161532181601e850160208701614f7c565b91909101601e0192915050565b600181815b8085111561538757817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561536d5761536d614e1a565b8085161561537a57918102915b93841c9390800290615333565b509250929050565b60008261539e57506001612ea1565b816153ab57506000612ea1565b81600181146153c157600281146153cb576153e7565b6001915050612ea1565b60ff8411156153dc576153dc614e1a565b50506001821b612ea1565b5060208310610133831016604e8410600b841016171561540a575081810a612ea1565b615414838361532e565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561544657615446614e1a565b029392505050565b6000614ebf60ff84168361538f565b60ff8181168382160290811690818114614bdd57614bdd614e1a565b600060ff83168061548c5761548c61516c565b8060ff84160491505092915050565b6000614ebf838361538f565b600082810b9082900b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808112607f82131715612ea157612ea1614e1a565b600081810b9083900b01607f81137fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8082121715612ea157612ea1614e1a565b7f4146544552205f75706461746543656c6c46726f6d4e65696768626f7220206981527f6e64657800000000000000000000000000000000000000000000000000000000602082015260008251615583816024850160208701614f7c565b9190910160240192915050565b600081518084526155a8816020860160208601614f7c565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6060815260006155ed6060830186615590565b82810360208401526155ff8186615590565b905082810360408401526156138185615590565b9695505050505050565b6040815260006156306040830185615590565b82810360208401526156428185615590565b95945050505050565b6000835161565d818460208801614f7c565b835190830190615671818360208801614f7c565b01949350505050565b60808152600061568d6080830187615590565b828103602084015261569f8187615590565b905082810360408401526156b38186615590565b90508281036060840152614cd18185615590565b6060815260006156da6060830186615590565b82810360208401526156ec8186615590565b915050826040830152949350505050565b6060815260006157106060830186615590565b82810360208401526157228186615590565b91505073ffffffffffffffffffffffffffffffffffffffff83166040830152949350505050565b60ff8281168282160390811115612ea157612ea1614e1a565b600060ff821660ff810361577857615778614e1a565b60010192915050565b6080815260006157946080830187615590565b82810360208401526157a68187615590565b905073ffffffffffffffffffffffffffffffffffffffff851660408401528281036060840152614cd18185615590565b60008160000b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80810361580b5761580b614e1a565b60000392915050565b62ffffff818116838216019080821115614bdd57614bdd614e1a565b6060815260006158436060830186615590565b60208301949094525060400152919050565b6040815260006158686040830185615590565b9050826020830152939250505056fe25732d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2da26469706673582212201e1eff75d8929545494b847406708a71b12ed0e655f88b1fbbab132e32dae03d64736f6c63430008140033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "errors": {
      "ReserveTooLow(uint256,uint256)": [
        {
          "params": {
            "expected": "amount required to proceed",
            "inReserve": "amount in reserver as the time of the call"
          }
        }
      ]
    },
    "events": {
      "CommitmentCancelled(address,uint24)": {
        "params": {
          "epoch": "epoch number on which this commit belongs to",
          "player": "account taking the staking risk (can be a different account than the one controlling the gems)"
        }
      },
      "CommitmentMade(address,uint24,bytes24)": {
        "params": {
          "commitmentHash": "the hash of moves",
          "epoch": "epoch number on which this commit belongs to",
          "player": "account taking the staking risk (can be a different account than the one controlling the gems)"
        }
      },
      "CommitmentRevealed(address,uint24,bytes24,(uint64,uint8)[],bytes24,uint256)": {
        "params": {
          "commitmentHash": "the hash of the moves",
          "epoch": "epoch number on which this commit belongs to",
          "furtherMoves": "hash of further moves, unless bytes32(0) which indicate end.",
          "moves": "the moves",
          "player": "account who commited"
        }
      },
      "CommitmentVoid(address,uint24,uint256,bytes24)": {
        "params": {
          "amountBurnt": "amount of token to burn",
          "epoch": "epoch number on which this commit belongs to",
          "furtherMoves": "hash of further moves, unless bytes32(0) which indicate end.",
          "player": "the account that made the commitment"
        }
      },
      "MoveProcessed(uint64,address,uint8,uint8)": {
        "params": {
          "newColor": "color that takes over",
          "oldColor": "previous color of the cell",
          "player": "account making the move",
          "position": "cell at which the move take place"
        }
      },
      "MultiPoke(uint24,uint64[])": {
        "params": {
          "epoch": "epoch number at which the poke take place",
          "positions": "cells to poke"
        }
      },
      "ReserveDeposited(address,uint256,uint256)": {
        "params": {
          "amountDeposited": "the number of tokens deposited",
          "newAmount": "the number of tokens in reserver as a result",
          "player": "account receiving the token in the reserve"
        }
      },
      "ReserveWithdrawn(address,uint256,uint256)": {
        "params": {
          "amountWithdrawn": "the number of tokens withdrawnn",
          "newAmount": "the number of tokens in reserver as a result",
          "player": "account withdrawing the tokens"
        }
      },
      "SinglePoke(uint24,uint64)": {
        "params": {
          "epoch": "epoch number at which the poke take place",
          "position": "cell to poke"
        }
      }
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "evm": {
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "4552800",
        "executionCost": "infinite",
        "totalCost": "infinite"
      },
      "external": {
        "forceCells((uint64,address,uint24,uint24,uint8,uint8,int8,uint8)[])": "infinite",
        "forceMoves(address,(uint64,uint8)[])": "infinite",
        "forceSimpleCells((uint64,address,uint8,uint8)[])": "infinite",
        "getRawCell(uint256)": "5484"
      },
      "internal": {
        "_getOwner()": "infinite",
        "_updateNeighbosrDelta(uint64,enum UsingStratagemsTypes.Color,uint24)": "infinite",
        "isEnemyOrFriend(enum UsingStratagemsTypes.Color,enum UsingStratagemsTypes.Color)": "242"
      }
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20WithIERC2612\",\"name\":\"tokens\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"burnAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commitPhaseDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revealPhaseDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"maxLife\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"numTokensPerGems\",\"type\":\"uint256\"},{\"internalType\":\"contract ITime\",\"name\":\"time\",\"type\":\"address\"}],\"internalType\":\"struct UsingStratagemsTypes.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CanStillReveal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CommitmentHashNotMatching\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GameNotStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InCommitmentPhase\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InRevealPhase\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCellOverwrite\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEpoch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFurtherMoves\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"life\",\"type\":\"uint256\"},{\"internalType\":\"int32\",\"name\":\"x\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"y\",\"type\":\"int32\"}],\"name\":\"InvalidLifeConfiguration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToReveal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PreviousCommitmentNotRevealed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"}],\"name\":\"ReserveTooLow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"epoch\",\"type\":\"uint24\"}],\"name\":\"CommitmentCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"epoch\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"bytes24\",\"name\":\"commitmentHash\",\"type\":\"bytes24\"}],\"name\":\"CommitmentMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"epoch\",\"type\":\"uint24\"},{\"indexed\":true,\"internalType\":\"bytes24\",\"name\":\"commitmentHash\",\"type\":\"bytes24\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"position\",\"type\":\"uint64\"},{\"internalType\":\"enum UsingStratagemsTypes.Color\",\"name\":\"color\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct UsingStratagemsTypes.Move[]\",\"name\":\"moves\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"bytes24\",\"name\":\"furtherMoves\",\"type\":\"bytes24\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newReserveAmount\",\"type\":\"uint256\"}],\"name\":\"CommitmentRevealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"epoch\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBurnt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes24\",\"name\":\"furtherMoves\",\"type\":\"bytes24\"}],\"name\":\"CommitmentVoid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"position\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"lastEpochUpdate\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"epochWhenTokenIsAdded\",\"type\":\"uint24\"},{\"internalType\":\"enum UsingStratagemsTypes.Color\",\"name\":\"color\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"life\",\"type\":\"uint8\"},{\"internalType\":\"int8\",\"name\":\"delta\",\"type\":\"int8\"},{\"internalType\":\"uint8\",\"name\":\"enemyMap\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct IStratagemsDebug.DebugCell[]\",\"name\":\"cells\",\"type\":\"tuple[]\"}],\"name\":\"ForceCells\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"epoch\",\"type\":\"uint24\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"position\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"enum UsingStratagemsTypes.Color\",\"name\":\"color\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"life\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct IStratagemsDebug.SimpleCell[]\",\"name\":\"cells\",\"type\":\"tuple[]\"}],\"name\":\"ForceSimpleCells\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"position\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum UsingStratagemsTypes.Color\",\"name\":\"oldColor\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum UsingStratagemsTypes.Color\",\"name\":\"newColor\",\"type\":\"uint8\"}],\"name\":\"MoveProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"epoch\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"positions\",\"type\":\"uint64[]\"}],\"name\":\"MultiPoke\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountDeposited\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"ReserveDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWithdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"ReserveWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"epoch\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"position\",\"type\":\"uint64\"}],\"name\":\"SinglePoke\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"position\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"lastEpochUpdate\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"epochWhenTokenIsAdded\",\"type\":\"uint24\"},{\"internalType\":\"enum UsingStratagemsTypes.Color\",\"name\":\"color\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"life\",\"type\":\"uint8\"},{\"internalType\":\"int8\",\"name\":\"delta\",\"type\":\"int8\"},{\"internalType\":\"uint8\",\"name\":\"enemyMap\",\"type\":\"uint8\"}],\"internalType\":\"struct IStratagemsDebug.DebugCell[]\",\"name\":\"cells\",\"type\":\"tuple[]\"}],\"name\":\"forceCells\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"position\",\"type\":\"uint64\"},{\"internalType\":\"enum UsingStratagemsTypes.Color\",\"name\":\"color\",\"type\":\"uint8\"}],\"internalType\":\"struct UsingStratagemsTypes.Move[]\",\"name\":\"moves\",\"type\":\"tuple[]\"}],\"name\":\"forceMoves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"position\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"enum UsingStratagemsTypes.Color\",\"name\":\"color\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"life\",\"type\":\"uint8\"}],\"internalType\":\"struct IStratagemsDebug.SimpleCell[]\",\"name\":\"cells\",\"type\":\"tuple[]\"}],\"name\":\"forceSimpleCells\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getRawCell\",\"outputs\":[{\"components\":[{\"internalType\":\"uint24\",\"name\":\"lastEpochUpdate\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"epochWhenTokenIsAdded\",\"type\":\"uint24\"},{\"internalType\":\"enum UsingStratagemsTypes.Color\",\"name\":\"color\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"life\",\"type\":\"uint8\"},{\"internalType\":\"int8\",\"name\":\"delta\",\"type\":\"int8\"},{\"internalType\":\"uint8\",\"name\":\"enemyMap\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"distribution\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"stake\",\"type\":\"uint8\"}],\"internalType\":\"struct UsingStratagemsTypes.Cell\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ReserveTooLow(uint256,uint256)\":[{\"params\":{\"expected\":\"amount required to proceed\",\"inReserve\":\"amount in reserver as the time of the call\"}}]},\"events\":{\"CommitmentCancelled(address,uint24)\":{\"params\":{\"epoch\":\"epoch number on which this commit belongs to\",\"player\":\"account taking the staking risk (can be a different account than the one controlling the gems)\"}},\"CommitmentMade(address,uint24,bytes24)\":{\"params\":{\"commitmentHash\":\"the hash of moves\",\"epoch\":\"epoch number on which this commit belongs to\",\"player\":\"account taking the staking risk (can be a different account than the one controlling the gems)\"}},\"CommitmentRevealed(address,uint24,bytes24,(uint64,uint8)[],bytes24,uint256)\":{\"params\":{\"commitmentHash\":\"the hash of the moves\",\"epoch\":\"epoch number on which this commit belongs to\",\"furtherMoves\":\"hash of further moves, unless bytes32(0) which indicate end.\",\"moves\":\"the moves\",\"player\":\"account who commited\"}},\"CommitmentVoid(address,uint24,uint256,bytes24)\":{\"params\":{\"amountBurnt\":\"amount of token to burn\",\"epoch\":\"epoch number on which this commit belongs to\",\"furtherMoves\":\"hash of further moves, unless bytes32(0) which indicate end.\",\"player\":\"the account that made the commitment\"}},\"MoveProcessed(uint64,address,uint8,uint8)\":{\"params\":{\"newColor\":\"color that takes over\",\"oldColor\":\"previous color of the cell\",\"player\":\"account making the move\",\"position\":\"cell at which the move take place\"}},\"MultiPoke(uint24,uint64[])\":{\"params\":{\"epoch\":\"epoch number at which the poke take place\",\"positions\":\"cells to poke\"}},\"ReserveDeposited(address,uint256,uint256)\":{\"params\":{\"amountDeposited\":\"the number of tokens deposited\",\"newAmount\":\"the number of tokens in reserver as a result\",\"player\":\"account receiving the token in the reserve\"}},\"ReserveWithdrawn(address,uint256,uint256)\":{\"params\":{\"amountWithdrawn\":\"the number of tokens withdrawnn\",\"newAmount\":\"the number of tokens in reserver as a result\",\"player\":\"account withdrawing the tokens\"}},\"SinglePoke(uint24,uint64)\":{\"params\":{\"epoch\":\"epoch number at which the poke take place\",\"position\":\"cell to poke\"}}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"CanStillReveal()\":[{\"notice\":\"Player have to reveal if they can Stratagems will prevent them from acknowledging missed reveal if there is still time to reveal.\"}],\"CommitmentHashNotMatching()\":[{\"notice\":\"Player have to reveal their commitment using the exact same move values  If they provide different value, the commitment hash will differ and Stratagems will reject their reveal.\"}],\"GameNotStarted()\":[{\"notice\":\"Game has not started yet, can't perform any action\"}],\"InCommitmentPhase()\":[{\"notice\":\"When in Commit phase, player can make new commitment but they cannot reveal their move yet.\"}],\"InRevealPhase()\":[{\"notice\":\"When in Reveal phase, it is not possible to commit new moves or cancel previous commitment  During Reveal phase, players have to reveal their commitment, if not already done.\"}],\"InvalidEpoch()\":[{\"notice\":\"Player can only reveal their move in the same epoch they commited.abi  If a player reveal later it can only do to minimize the reserve burn cost by calling : `acknowledgeMissedReveal`\"}],\"InvalidFurtherMoves()\":[{\"notice\":\"Player can make arbitrary number of moves per epoch. To do so they group moves into (MAX_NUM_MOVES_PER_HASH = 32) moves  This result in a recursive series of hash that they can then submit in turn while revealing.  The limit  (MAX_NUM_MOVES_PER_HASH = 32) ensure a reveal batch fits in a block.\"}],\"NotAuthorized()\":[{\"notice\":\"Not authorized to perform this operation\"}],\"NothingToReveal()\":[{\"notice\":\"Player can only reveal moves they commited.\"}],\"PreviousCommitmentNotRevealed()\":[{\"notice\":\"Previous commitment need to be revealed before making a new one. Even if the corresponding reveal phase has passed.\\\\  It is also not possible to withdraw any amount from reserve until the commitment is revealed.\\\\If player lost the information to reveal, it can acknowledge failure which will burn all its reserve.\\\\\"}],\"ReserveTooLow(uint256,uint256)\":[{\"notice\":\"to make a commitment you always need at least one `config.numTokensPerGems` amount in reserve  Player also need one `config.numTokensPerGems`  per moves during the Reveal phase.\"}]},\"events\":{\"CommitmentCancelled(address,uint24)\":{\"notice\":\"A player has cancelled its current commitment (before it reached the reveal phase)\"},\"CommitmentMade(address,uint24,bytes24)\":{\"notice\":\"A player has commited to make a move and reveal it on the reveal phase\"},\"CommitmentRevealed(address,uint24,bytes24,(uint64,uint8)[],bytes24,uint256)\":{\"notice\":\"Player has revealed its previous commitment\"},\"CommitmentVoid(address,uint24,uint256,bytes24)\":{\"notice\":\"A player has canceled a previous commitment by burning some tokens\"},\"MoveProcessed(uint64,address,uint8,uint8)\":{\"notice\":\"A move has been revealed.\"},\"MultiPoke(uint24,uint64[])\":{\"notice\":\"poke multiple cells and update them if needed\"},\"ReserveDeposited(address,uint256,uint256)\":{\"notice\":\"Player has deposited token in the reserve, allowing it to use that much in game\"},\"ReserveWithdrawn(address,uint256,uint256)\":{\"notice\":\"Player have withdrawn token from the reserve\"},\"SinglePoke(uint24,uint64)\":{\"notice\":\"poke cell and update it if needed\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/game/debug/StratagemsDebug.sol\":\"StratagemsDebug\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC165/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceID The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0bbdb7cf3d2c6acf95398c0ef54cb0e6ae8a3e6ce6f18fafeb0aa55cb74fb8fd\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC20/ERC2612/interfaces/IERC20WithIERC2612.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC20.sol\\\";\\nimport \\\"./IERC2612.sol\\\";\\n\\ninterface IERC20WithIERC2612 is IERC20, IERC2612 {}\\n\",\"keccak256\":\"0x66100d98de50a396d46feb17a2b2b400b13f033f5e01b45e95901e61a4feef05\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC20/ERC2612/interfaces/IERC2612.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC20Errors.sol\\\";\\n\\ninterface IERC2612 {\\n    /// @notice The signature do not match the expected signer\\n    error InvalidSignature();\\n    /// @notice The permit has expired\\n    /// @param currentTime time at which the error happen\\n    /// @param deadline the deadline\\n    error DeadlineOver(uint256 currentTime, uint256 deadline);\\n\\n    /// @notice allow `spender` to spend `value` amount of token on behalf of `owner`\\n    /// @param owner owner of the tokens\\n    /// @param spender address allowed to spend on behalf of the owner.\\n    /// @param value amount of token allowed to be spent\\n    /// @param deadline timestamp in seconds after which the permit is not valid.\\n    /// @param v signature part v\\n    /// @param r signature part r\\n    /// @param s signature part s\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /// @notice return the current nonce of the owner\\n    /// @param owner address queried\\n    /// @return nonce nonce value\\n    function nonces(address owner) external view returns (uint256 nonce);\\n\\n    /// @notice EIP-712 Domain separator hash\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x4cfe3a61d7721761dd90ceb55c77d5d7ecaeb153d567c40d3b5ca33e266df2ea\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC20/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IERC20Errors.sol\\\";\\n\\ninterface IERC20 {\\n    /// @notice trigger when tokens are transferred, including zero value transfers.\\n    /// @param from the account the tokens are sent from\\n    /// @param to the account the tokens are sent to\\n    /// @param value number of tokens sent\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice trigger on approval amount being set.\\n    ///   Note that Transfer events need to be considered to compute the current allowance.\\n    /// @param owner the account approving the `spender`\\n    /// @param spender the account allowed to spend\\n    /// @param value the amount granted\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice Returns the total token supply.\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice Returns the number of decimals the token uses.\\n    function decimals() external view returns (uint8);\\n\\n    /// @notice Returns the symbol of the token.\\n    function symbol() external view returns (string memory);\\n\\n    /// @notice Returns the name of the token.\\n    function name() external view returns (string memory);\\n\\n    /// @notice Returns the account balance of another account with address `owner`.\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /// @notice Transfers `amount` of tokens to address `to`.\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /// @notice Returns the amount which `spender` is still allowed to withdraw from `owner`.\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /// @notice Allows `spender` to withdraw from your account multiple times, up to `amount`.\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /// @notice Transfers `amount` tokens from address `from` to address `to`.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x15bb1e4e1340b29eefc06b8826fcf9e6455e25ba972709672da7d3788777133f\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC20/interfaces/IERC20Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @notice The msg value do not match the expected value\\n/// @param provided msg.value amount provided\\n/// @param expected value expected\\nerror InvalidMsgValue(uint256 provided, uint256 expected);\\n/// @notice The total amount provided do not match the expected value\\n/// @param provided msg.value amount provided\\n/// @param expected value expected\\nerror InvalidTotalAmount(uint256 provided, uint256 expected);\\n/// @notice An invalid address is specified (for example: zero address)\\n/// @param addr invalid address\\nerror InvalidAddress(address addr);\\n/// @notice the amount requested exceed the allowance\\n/// @param currentAllowance the current allowance\\n/// @param expected amount expected\\nerror NotAuthorizedAllowance(uint256 currentAllowance, uint256 expected);\\n/// @notice the amount requested exceed the balance\\n/// @param currentBalance the current balance\\n/// @param expected amount expected\\nerror NotEnoughTokens(uint256 currentBalance, uint256 expected);\\n\",\"keccak256\":\"0xc8ab4cfee19338da32d2fc5473e1ee740bf608c59196ebd16de74294c4813ae9\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../ERC165/interfaces/IERC165.sol\\\";\\nimport \\\"../../utils/GenericErrors.sol\\\";\\n\\ninterface IERC721Supply {\\n    /// @notice return the total number of token in existence\\n    function totalSupply() external view returns (uint256);\\n}\\n\\ninterface IERC721 is IERC165 {\\n    /// @notice Triggered when a token is transferred\\n    /// @param from the account the token is sent from\\n    /// @param to the account the token is sent to\\n    /// @param tokenID id of the token being sent\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenID);\\n\\n    /// @notice Triggered when a token is approved to be sent by another account\\n    ///  Note tat the approval get reset when a Transfer event for that same token is emitted.\\n    /// @param owner current owner of the token\\n    /// @param approved account who can know transfer on the owner's behalf\\n    /// @param tokenID id of the token being approved\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenID);\\n\\n    /// @notice Triggered when an account approve or disaprove another to transfer on its behalf\\n    /// @param owner the account granting rights over all of its token\\n    /// @param operator account who can know transfer on the owner's behalf\\n    /// @param approved whether it is approved or not\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /// @notice The token does not exist\\n    /// @param tokenID id of the expected token\\n    error NonExistentToken(uint256 tokenID);\\n    /// @notice The address from which the token is sent is not the current owner\\n    /// @param provided the address expected to be the current owner\\n    /// @param currentOwner the current owner\\n    error NotOwner(address provided, address currentOwner);\\n    /// @notice An invalid address is specified (for example: zero address)\\n    /// @param addr invalid address\\n    error InvalidAddress(address addr);\\n    /// @notice The Transfer was rejected by the destination\\n    error TransferRejected();\\n    /// @notice The Nonce overflowed, make a transfer to self to allow new nonces.\\n    error NonceOverflow();\\n\\n    /// @notice Get the number of tokens owned by an address.\\n    /// @param owner The address to look for.\\n    /// @return balance The number of tokens owned by the address.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Get the owner of a token.\\n    /// @param tokenID The id of the token.\\n    /// @return owner The address of the token owner.\\n    function ownerOf(uint256 tokenID) external view returns (address owner);\\n\\n    /// @notice Transfer a token between 2 addresses letting the receiver knows of the transfer.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param tokenID The id of the token.\\n    /// @param data Additional data.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenID,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Transfer a token between 2 addresses letting the receiver know of the transfer.\\n    /// @param from The send of the token.\\n    /// @param to The recipient of the token.\\n    /// @param tokenID The id of the token.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenID\\n    ) external;\\n\\n    /// @notice Transfer a token between 2 addresses.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param tokenID The id of the token.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenID\\n    ) external;\\n\\n    /// @notice Approve an operator to transfer a specific token on the senders behalf.\\n    /// @param operator The address receiving the approval.\\n    /// @param tokenID The id of the token.\\n    function approve(address operator, uint256 tokenID) external;\\n\\n    /// @notice Set the approval for an operator to manage all the tokens of the sender.\\n    /// @param operator The address receiving the approval.\\n    /// @param approved The determination of the approval.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Get the approved operator for a specific token.\\n    /// @param tokenID The id of the token.\\n    /// @return operator The address of the operator.\\n    function getApproved(uint256 tokenID) external view returns (address operator);\\n\\n    /// @notice Check if the sender approved the operator to transfer any of its tokens.\\n    /// @param owner The address of the owner.\\n    /// @param operator The address of the operator.\\n    /// @return isOperator The status of the approval.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xfc57636452848e89a81850fe10e3ab1d5d7f5780d55ca0722a38fd59a44fd8ef\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC721/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\ninterface IERC721Metadata is IERC721 {\\n    /// @notice A descriptive name for a collection of NFTs in this contract\\n    function name() external view returns (string memory name);\\n\\n    /// @notice An abbreviated name for NFTs in this contract\\n    function symbol() external view returns (string memory symbol);\\n\\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n    /// @dev Throws if `tokenID` is not a valid NFT. URIs are defined in RFC\\n    ///  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\n    ///  Metadata JSON Schema\\\".\\n    /// @param tokenID id of the token being queried.\\n    function tokenURI(uint256 tokenID) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x8a4ff84c39ad5c6bbf3e5486d3687bc1e15b96835ede5761f1922cf7a72f3354\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/debug/time/interfaces/ITime.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ITime {\\n    function timestamp() external view returns (uint256);\\n}\\n\\ninterface ITimeSetter {\\n    event TimeIncreased(uint256 newTime, uint256 delta);\\n\\n    function increaseTime(uint256 delta) external;\\n}\\n\",\"keccak256\":\"0xeb0fa861febbb5f5956ea9f48a88c812671564d249ddd8c5c00740e922eb056d\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/utils/GenericErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @notice Not authorized to perform this operation\\nerror NotAuthorized();\\n\",\"keccak256\":\"0x333aa48943e66849a9350384e7ec2553b93e8a8a12b8ad300d3341f7c98b60fd\",\"license\":\"MIT\"},\"src/game/debug/IStratagemsWithDebug.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport '../interface/IStratagems.sol';\\nimport '../interface/UsingStratagemsTypes.sol';\\n\\ninterface IStratagemsDebug is UsingStratagemsTypes {\\n\\terror InvalidCellOverwrite();\\n\\terror InvalidLifeConfiguration(uint256 life, int32 x, int32 y);\\n\\n\\tevent ForceCells(DebugCell[] cells);\\n\\tevent ForceSimpleCells(uint24 epoch, SimpleCell[] cells);\\n\\n\\tfunction forceMoves(address player, Move[] memory moves) external;\\n\\n\\tstruct DebugCell {\\n\\t\\tuint64 position;\\n\\t\\taddress owner;\\n\\t\\tuint24 lastEpochUpdate;\\n\\t\\tuint24 epochWhenTokenIsAdded;\\n\\t\\tColor color;\\n\\t\\tuint8 life;\\n\\t\\tint8 delta;\\n\\t\\tuint8 enemyMap;\\n\\t}\\n\\n\\tfunction forceCells(DebugCell[] memory cells) external;\\n\\n\\tstruct SimpleCell {\\n\\t\\tuint64 position;\\n\\t\\taddress owner;\\n\\t\\tColor color;\\n\\t\\tuint8 life;\\n\\t}\\n\\n\\tfunction forceSimpleCells(SimpleCell[] memory cells) external;\\n\\n\\tfunction getRawCell(uint256 id) external view returns (Cell memory cell);\\n}\\n\\ninterface IStratagemsWithDebug is IStratagems, IStratagemsDebug {}\\n\",\"keccak256\":\"0x2f587d438a7f6e4d983a389f6dd111ea92e83425b6f339b3b395c2625b80a197\",\"license\":\"AGPL-3.0\"},\"src/game/debug/StratagemsDebug.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"../internal/UsingStratagemsSetters.sol\\\";\\nimport \\\"./IStratagemsWithDebug.sol\\\";\\nimport \\\"../../utils/PositionUtils.sol\\\";\\n\\ncontract StratagemsDebug is UsingStratagemsSetters, IStratagemsDebug {\\n\\tusing PositionUtils for uint64;\\n\\n\\tconstructor(Config memory config) UsingStratagemsSetters(config) {}\\n\\n\\tfunction getRawCell(uint256 id) external view returns (Cell memory) {\\n\\t\\treturn _cells[id];\\n\\t}\\n\\n\\tfunction _getOwner() internal view returns (address ownerAddress) {\\n\\t\\t// solhint-disable-next-line security/no-inline-assembly\\n\\t\\tassembly {\\n\\t\\t\\townerAddress := sload(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction forceMoves(address player, Move[] memory moves) external {\\n\\t\\tif (msg.sender != _getOwner()) {\\n\\t\\t\\trevert NotAuthorized();\\n\\t\\t}\\n\\t\\t(uint24 epoch, bool commiting) = _epoch();\\n\\t\\tif (commiting) {\\n\\t\\t\\tepoch--;\\n\\t\\t}\\n\\n\\t\\tuint256 numTokens = NUM_TOKENS_PER_GEMS * moves.length;\\n\\t\\tTOKENS.transferFrom(msg.sender, address(this), numTokens);\\n\\t\\t_tokensInReserve[player] += numTokens;\\n\\t\\t_resolveMoves(player, epoch, moves, msg.sender);\\n\\t}\\n\\n\\tfunction forceCells(DebugCell[] memory cells) external {\\n\\t\\tif (msg.sender != _getOwner()) {\\n\\t\\t\\trevert NotAuthorized();\\n\\t\\t}\\n\\t\\tfor (uint256 i = 0; i < cells.length; i++) {\\n\\t\\t\\tDebugCell memory debugCell = cells[i];\\n\\t\\t\\t_cells[debugCell.position] = Cell({\\n\\t\\t\\t\\tlastEpochUpdate: debugCell.lastEpochUpdate,\\n\\t\\t\\t\\tepochWhenTokenIsAdded: debugCell.epochWhenTokenIsAdded,\\n\\t\\t\\t\\tcolor: debugCell.color,\\n\\t\\t\\t\\tlife: debugCell.life,\\n\\t\\t\\t\\tdelta: debugCell.delta,\\n\\t\\t\\t\\tenemyMap: debugCell.enemyMap,\\n\\t\\t\\t\\tdistribution: 0, // TODO let debug distribution ?\\n\\t\\t\\t\\tstake: 1\\n\\t\\t\\t});\\n\\t\\t\\t_owners[debugCell.position] = uint256(uint160(debugCell.owner));\\n\\t\\t}\\n\\t\\temit ForceCells(cells);\\n\\t}\\n\\n\\tfunction forceSimpleCells(SimpleCell[] memory cells) external {\\n\\t\\tif (msg.sender != _getOwner()) {\\n\\t\\t\\trevert NotAuthorized();\\n\\t\\t}\\n\\t\\t(uint24 epoch, ) = _epoch();\\n\\n\\t\\tfor (uint256 i = 0; i < cells.length; i++) {\\n\\t\\t\\tSimpleCell memory simpleCell = cells[i];\\n\\t\\t\\tif (_cells[simpleCell.position].lastEpochUpdate != 0) {\\n\\t\\t\\t\\trevert InvalidCellOverwrite();\\n\\t\\t\\t}\\n\\t\\t\\tTOKENS.transferFrom(msg.sender, address(this), NUM_TOKENS_PER_GEMS);\\n\\n\\t\\t\\t(int8 delta, uint8 enemyMap) = _updateNeighbosrDelta(simpleCell.position, simpleCell.color, epoch);\\n\\n\\t\\t\\t_cells[simpleCell.position] = Cell({\\n\\t\\t\\t\\tlastEpochUpdate: epoch,\\n\\t\\t\\t\\tepochWhenTokenIsAdded: epoch,\\n\\t\\t\\t\\tcolor: simpleCell.color,\\n\\t\\t\\t\\tlife: simpleCell.life,\\n\\t\\t\\t\\tdelta: delta,\\n\\t\\t\\t\\tenemyMap: enemyMap,\\n\\t\\t\\t\\tdistribution: 0,\\n\\t\\t\\t\\tstake: 1\\n\\t\\t\\t});\\n\\t\\t\\t_owners[simpleCell.position] = uint256(uint160(simpleCell.owner));\\n\\t\\t}\\n\\n\\t\\tfor (uint256 i = 0; i < cells.length; i++) {\\n\\t\\t\\tuint256 position = cells[i].position;\\n\\t\\t\\tCell memory cell = _cells[position];\\n\\n\\t\\t\\t// we act as if the token were added in previous epochs\\n\\t\\t\\t// this is so it does not affect the reveal phase\\n\\t\\t\\tint8 effectiveDelta = cell.delta != 0 ? cell.delta : -1;\\n\\t\\t\\tif (effectiveDelta < 0 && cell.enemyMap == 0) {\\n\\t\\t\\t\\teffectiveDelta = 0;\\n\\t\\t\\t}\\n\\t\\t\\tint256 potentialLife = int256(uint256(cell.life)) - effectiveDelta;\\n\\t\\t\\tif (potentialLife < 0) {\\n\\t\\t\\t\\tpotentialLife = 0;\\n\\t\\t\\t}\\n\\t\\t\\tif (uint256(potentialLife) > MAX_LIFE) {\\n\\t\\t\\t\\tunchecked {\\n\\t\\t\\t\\t\\tint32 x = int32(int256(uint256(position) & 0xFFFFFFFF));\\n\\t\\t\\t\\t\\tint32 y = int32(int256(uint256(position) >> 32));\\n\\t\\t\\t\\t\\trevert InvalidLifeConfiguration(uint256(potentialLife), x, y);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tcell.life = uint8(uint256(potentialLife));\\n\\n\\t\\t\\tCell memory updatedCell = Cell({\\n\\t\\t\\t\\tlastEpochUpdate: epoch - 1,\\n\\t\\t\\t\\tepochWhenTokenIsAdded: epoch - 1,\\n\\t\\t\\t\\tcolor: cell.color,\\n\\t\\t\\t\\tlife: cell.life,\\n\\t\\t\\t\\tdelta: cell.delta,\\n\\t\\t\\t\\tenemyMap: cell.enemyMap,\\n\\t\\t\\t\\tdistribution: 0, // TODO let debug distribution ?\\n\\t\\t\\t\\tstake: 1\\n\\t\\t\\t});\\n\\t\\t\\t_cells[position] = updatedCell;\\n\\n\\t\\t\\tlogger.logCell(\\n\\t\\t\\t\\t0,\\n\\t\\t\\t\\tstring.concat(\\\"forceSimpleCells at epoch \\\", Strings.toString(epoch)),\\n\\t\\t\\t\\tuint64(position),\\n\\t\\t\\t\\tupdatedCell,\\n\\t\\t\\t\\taddress(uint160(_owners[position]))\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\temit ForceSimpleCells(epoch, cells);\\n\\t}\\n\\n\\tfunction isEnemyOrFriend(Color a, Color b) internal pure returns (int8) {\\n\\t\\tif (a != Color.None && b != Color.None) {\\n\\t\\t\\treturn a == b ? int8(1) : int8(-1);\\n\\t\\t}\\n\\t\\treturn 0;\\n\\t}\\n\\n\\t// function _computeDelta(uint64 position, Color color) internal view returns (int8 delta, uint8 enemyMap) {\\n\\t// \\tunchecked {\\n\\t// \\t\\t{\\n\\t// \\t\\t\\tuint64 upPosition = position.offset(0, -1);\\n\\t// \\t\\t\\tint8 enemyOrFriend = isEnemyOrFriend(color, _cells[upPosition].color);\\n\\t// \\t\\t\\tif (enemyOrFriend < 0) {\\n\\t// \\t\\t\\t\\tenemyMap = enemyMap | 1;\\n\\t// \\t\\t\\t}\\n\\t// \\t\\t\\tdelta += enemyOrFriend;\\n\\t// \\t\\t}\\n\\t// \\t\\t{\\n\\t// \\t\\t\\tuint64 leftPosition = position.offset(-1, 0);\\n\\t// \\t\\t\\tint8 enemyOrFriend = isEnemyOrFriend(color, _cells[leftPosition].color);\\n\\t// \\t\\t\\tif (enemyOrFriend < 0) {\\n\\t// \\t\\t\\t\\tenemyMap = enemyMap | 1;\\n\\t// \\t\\t\\t}\\n\\t// \\t\\t\\tdelta += enemyOrFriend;\\n\\t// \\t\\t}\\n\\n\\t// \\t\\t{\\n\\t// \\t\\t\\tuint64 downPosition = position.offset(0, 1);\\n\\t// \\t\\t\\tint8 enemyOrFriend = isEnemyOrFriend(color, _cells[downPosition].color);\\n\\t// \\t\\t\\tif (enemyOrFriend < 0) {\\n\\t// \\t\\t\\t\\tenemyMap = enemyMap | 1;\\n\\t// \\t\\t\\t}\\n\\t// \\t\\t\\tdelta += enemyOrFriend;\\n\\t// \\t\\t}\\n\\t// \\t\\t{\\n\\t// \\t\\t\\tuint64 rightPosition = position.offset(1, 0);\\n\\t// \\t\\t\\tint8 enemyOrFriend = isEnemyOrFriend(color, _cells[rightPosition].color);\\n\\t// \\t\\t\\tif (enemyOrFriend < 0) {\\n\\t// \\t\\t\\t\\tenemyMap = enemyMap | 1;\\n\\t// \\t\\t\\t}\\n\\t// \\t\\t\\tdelta += enemyOrFriend;\\n\\t// \\t\\t}\\n\\t// \\t}\\n\\t// }\\n\\n\\tfunction _updateNeighbosrDelta(\\n\\t\\tuint64 center,\\n\\t\\tColor color,\\n\\t\\tuint24 epoch\\n\\t) internal returns (int8 delta, uint8 enemyMap) {\\n\\t\\tunchecked {\\n\\t\\t\\t{\\n\\t\\t\\t\\tuint64 upPosition = center.offset(0, -1);\\n\\t\\t\\t\\tCell memory cell = _cells[upPosition];\\n\\t\\t\\t\\tif (cell.color != Color.None) {\\n\\t\\t\\t\\t\\tint8 enemyOrFriend = isEnemyOrFriend(color, cell.color);\\n\\t\\t\\t\\t\\tif (enemyOrFriend < 0) {\\n\\t\\t\\t\\t\\t\\tenemyMap = enemyMap | 1;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tdelta += enemyOrFriend;\\n\\t\\t\\t\\t\\t_updateCellFromNeighbor(upPosition, cell, cell.life, epoch, 2, Color.None, color);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t{\\n\\t\\t\\t\\tuint64 leftPosition = center.offset(-1, 0);\\n\\t\\t\\t\\tCell memory cell = _cells[leftPosition];\\n\\t\\t\\t\\tif (cell.color != Color.None) {\\n\\t\\t\\t\\t\\tint8 enemyOrFriend = isEnemyOrFriend(color, cell.color);\\n\\t\\t\\t\\t\\tif (enemyOrFriend < 0) {\\n\\t\\t\\t\\t\\t\\tenemyMap = enemyMap | 2;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tdelta += enemyOrFriend;\\n\\t\\t\\t\\t\\t_updateCellFromNeighbor(leftPosition, cell, cell.life, epoch, 3, Color.None, color);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t{\\n\\t\\t\\t\\tuint64 downPosition = center.offset(0, 1);\\n\\t\\t\\t\\tCell memory cell = _cells[downPosition];\\n\\t\\t\\t\\tif (cell.color != Color.None) {\\n\\t\\t\\t\\t\\tint8 enemyOrFriend = isEnemyOrFriend(color, cell.color);\\n\\t\\t\\t\\t\\tif (enemyOrFriend < 0) {\\n\\t\\t\\t\\t\\t\\tenemyMap = enemyMap | 4;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tdelta += enemyOrFriend;\\n\\t\\t\\t\\t\\t_updateCellFromNeighbor(downPosition, cell, cell.life, epoch, 0, Color.None, color);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t{\\n\\t\\t\\t\\tuint64 rightPosition = center.offset(1, 0);\\n\\t\\t\\t\\tCell memory cell = _cells[rightPosition];\\n\\t\\t\\t\\tif (cell.color != Color.None) {\\n\\t\\t\\t\\t\\tint8 enemyOrFriend = isEnemyOrFriend(color, cell.color);\\n\\t\\t\\t\\t\\tif (enemyOrFriend < 0) {\\n\\t\\t\\t\\t\\t\\tenemyMap = enemyMap | 8;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tdelta += enemyOrFriend;\\n\\t\\t\\t\\t\\t_updateCellFromNeighbor(rightPosition, cell, cell.life, epoch, 1, Color.None, color);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xc13b5167ede6043a5d7aa08c709f36a7c5aa2c1b38a9364f9d86732b67f39264\",\"license\":\"AGPL-3.0\"},\"src/game/interface/IStratagems.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport 'solidity-kit/solc_0.8/ERC721/interfaces/IERC721.sol';\\nimport 'solidity-kit/solc_0.8/ERC721/interfaces/IERC721Metadata.sol';\\nimport 'solidity-kit/solc_0.8/ERC165/interfaces/IERC165.sol';\\nimport './UsingStratagemsTypes.sol';\\nimport './UsingStratagemsEvents.sol';\\n\\n\\ninterface IStratagemsGetters is UsingStratagemsTypes, UsingStratagemsEvents {\\n\\t/// @notice return updated cell (based on current epoch)\\n\\t/// @param id the cell id\\n\\tfunction getCell(uint256 id) external view returns (FullCell memory cell);\\n\\n\\t/// @notice return the list of updated cells (based on current epoch) whose ids is given\\n\\t/// @param ids the list of cell ids\\n\\tfunction getCells(uint256[] memory ids) external view returns (FullCell[] memory cells);\\n\\n\\t/// @notice the number of token in reserve per account\\n\\t///  This is used to slash player who do not reveal their moves\\n\\t///  The amount can be greater than the number of token required for the next move\\n\\t///  This allow player to potentially hide their intention.\\n\\t/// @param account the address to retrived the amount in reserve of.\\n\\tfunction getTokensInReserve(address account) external view returns (uint256 amount);\\n\\n\\t/// @notice The commitment to be revealed. zeroed if no commitment need to be made.\\n\\t/// @param account the address of which to retrieve the commitment\\n\\tfunction getCommitment(address account) external view returns (Commitment memory commitment);\\n\\n\\t/// @notice return the config used to initialise the Game\\n\\tfunction getConfig() external view returns (Config memory config);\\n}\\n\\ninterface IStratagemsSetters is UsingStratagemsTypes, UsingStratagemsEvents {\\n\\n\\t/// @notice called by players to add tokens to their reserve\\n\\t/// @param tokensAmountToAdd amount of tokens to add\\n\\t/// @param permit permit EIP2612, .value = zero if not needed\\n\\tfunction addToReserve(uint256 tokensAmountToAdd, Permit calldata permit) external;\\n\\n\\t/// @notice called by players to commit their moves\\n\\t///  this can be called multiple time in the same epoch, the last call overriding the previous.\\n\\t///  When a commitment is made, it needs to be revealed in the reveal phase of the same epoch.abi\\n\\t///  If missed, player can still reveal its moves but none of them will be resolved.\\n\\t///   The player would lose its associated reserved amount.\\n\\t/// @param commitmentHash the hash of the moves\\n\\t/// @param payee address to send ETH to along the commitment. Can be used to pay for reveal\\n\\tfunction makeCommitment(bytes24 commitmentHash, address payable payee) external payable;\\n\\n\\t/// @notice called by players to cancel their current commitment\\n\\t///  Can only be called during the commit phase in which the commitment was made\\n\\t///  It cannot be called afterward\\n\\tfunction cancelCommitment() external;\\n\\n\\t/// @notice called to make a commitment along with tokens to add to the reserve\\n\\t/// @param commitmentHash the has of the moves\\n\\t/// @param tokensAmountToAdd amount of tokens to add to the reserve. the resulting total must be enough to cover the moves\\n\\t/// @param permit permit EIP2612, value = zero if not needed\\n\\t/// @param payee address to send ETH to along the commitment. Can be used to pay for reveal\\n\\tfunction makeCommitmentWithExtraReserve(\\n\\t\\tbytes24 commitmentHash,\\n\\t\\tuint256 tokensAmountToAdd,\\n\\t\\tPermit calldata permit,\\n\\t\\taddress payable payee\\n\\t) external payable;\\n\\n\\t/// @notice called by players to withdraw tokens from the reserve\\n\\t///  can only be called if no commitments are pending\\n\\t///  Note that while you can withdraw after commiting, note that if you do not have enough tokens\\n\\t///  you'll have your commitment failing.\\n\\t/// @param amount number of tokens to withdraw\\n\\tfunction withdrawFromReserve(uint256 amount) external;\\n\\n\\t/// @notice called by player to reveal their moves\\n\\t///  this is where the core logic of the game takes place\\n\\t///  This is where the game board evolves\\n\\t///  The game is designed so that reveal order does not matter\\n\\t/// @param player the account who committed the move\\n\\t/// @param secret the secret used to make the commit\\n\\t/// @param moves the actual moves\\n\\t/// @param furtherMoves if moves cannot be contained in one tx, further moves are represented by a hash to reveal too\\n\\t///  Note that you have to that have enough moves (specified by MAX_NUM_MOVES_PER_HASH = 32)\\n\\t/// @param useReserve whether the tokens are taken from the reserve or from approvals.\\n\\t///  This allow player to keep their reserve intact and use it on their next move.\\n\\t///  Note that this require the Stratagems contract to have enough allowance.\\n\\t/// @param payee address to send ETH to along the reveal\\n\\tfunction reveal(\\n\\t\\taddress player,\\n\\t\\tbytes32 secret,\\n\\t\\tMove[] calldata moves,\\n\\t\\tbytes24 furtherMoves,\\n\\t\\tbool useReserve,\\n\\t\\taddress payable payee\\n\\t) external payable;\\n\\n\\t/// @notice called by player if they missed the reveal phase and want to minimze the token loss.\\n\\t///  By providing the moves, they will be slashed only the amount of token required to make the moves\\n\\t/// @param player the account who committed the move\\n\\t/// @param secret the secret used to make the commit\\n\\t/// @param moves the actual moves\\n\\t/// @param furtherMoves if moves cannot be contained in one tx, further moves are represented by a hash to reveal too\\n\\tfunction acknowledgeMissedReveal(\\n\\t\\taddress player,\\n\\t\\tbytes32 secret,\\n\\t\\tMove[] calldata moves,\\n\\t\\tbytes24 furtherMoves\\n\\t) external;\\n\\n\\t/// @notice should only be called as last resort\\n\\t/// this will burn all tokens in reserve\\n\\t/// If player has access to the secret, better call `acknowledgeMissedReveal`\\n\\tfunction acknowledgeMissedRevealByBurningAllReserve() external;\\n\\n\\t/// @notice poke a position, resolving its virtual state.\\n\\t//  If dead as a result, it will reward neighboor enemies colors\\n\\t/// @param position the cell position\\n\\tfunction poke(uint64 position) external;\\n\\n\\t/// @notice poke and collect the tokens won across multiple cells\\n\\t/// @param positions cell positions to collect from\\n\\tfunction pokeMultiple(uint64[] calldata positions) external;\\n}\\n\\ninterface IStratagems is IStratagemsSetters, IStratagemsGetters, IERC721, IERC721Metadata {}\\n\",\"keccak256\":\"0x9acdaf22ad3ed3634757eefab964d6d3f67be22d081d6002e7e6d97276e5e71c\",\"license\":\"AGPL-3.0\"},\"src/game/interface/UsingStratagemsErrors.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface UsingStratagemsErrors {\\n\\t/// @notice Game has not started yet, can't perform any action\\n\\terror GameNotStarted();\\n\\n\\t/// @notice When in Reveal phase, it is not possible to commit new moves or cancel previous commitment\\n\\t///  During Reveal phase, players have to reveal their commitment, if not already done.\\n\\terror InRevealPhase();\\n\\n\\t/// @notice When in Commit phase, player can make new commitment but they cannot reveal their move yet.\\n\\terror InCommitmentPhase();\\n\\n\\t/// @notice Previous commitment need to be revealed before making a new one. Even if the corresponding reveal phase has passed.\\\\\\n\\t///  It is also not possible to withdraw any amount from reserve until the commitment is revealed.\\\\\\n\\t/// @notice If player lost the information to reveal, it can acknowledge failure which will burn all its reserve.\\\\\\n\\terror PreviousCommitmentNotRevealed();\\n\\n\\t/// @notice to make a commitment you always need at least one `config.numTokensPerGems` amount in reserve\\n\\t///  Player also need one `config.numTokensPerGems`  per moves during the Reveal phase.\\n\\t/// @param inReserve amount in reserver as the time of the call\\n\\t/// @param expected amount required to proceed\\n\\terror ReserveTooLow(uint256 inReserve, uint256 expected);\\n\\n\\t/// @notice Player have to reveal their commitment using the exact same move values\\n\\t///  If they provide different value, the commitment hash will differ and Stratagems will reject their reveal.\\n\\terror CommitmentHashNotMatching();\\n\\n\\t/// @notice Player can only reveal moves they commited.\\n\\terror NothingToReveal();\\n\\n\\t/// @notice Player can only reveal their move in the same epoch they commited.abi\\n\\t///  If a player reveal later it can only do to minimize the reserve burn cost by calling : `acknowledgeMissedReveal`\\n\\terror InvalidEpoch();\\n\\n\\t/// @notice Player can make arbitrary number of moves per epoch. To do so they group moves into (MAX_NUM_MOVES_PER_HASH = 32) moves\\n\\t///  This result in a recursive series of hash that they can then submit in turn while revealing.\\n\\t///  The limit  (MAX_NUM_MOVES_PER_HASH = 32) ensure a reveal batch fits in a block.\\n\\terror InvalidFurtherMoves();\\n\\n\\t/// @notice Player have to reveal if they can\\n\\t/// Stratagems will prevent them from acknowledging missed reveal if there is still time to reveal.\\n\\terror CanStillReveal();\\n}\\n\",\"keccak256\":\"0xe6fd556d5df60bba43c3ade39792f1a3fbba2fcc6b25a14cb5da193763c8f68d\",\"license\":\"AGPL-3.0\"},\"src/game/interface/UsingStratagemsEvents.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./UsingStratagemsTypes.sol\\\";\\n\\ninterface UsingStratagemsEvents is UsingStratagemsTypes {\\n\\t/// @notice A player has commited to make a move and reveal it on the reveal phase\\n\\t/// @param player account taking the staking risk (can be a different account than the one controlling the gems)\\n\\t/// @param epoch epoch number on which this commit belongs to\\n\\t/// @param commitmentHash the hash of moves\\n\\tevent CommitmentMade(address indexed player, uint24 indexed epoch, bytes24 commitmentHash);\\n\\n\\t/// @notice A player has cancelled its current commitment (before it reached the reveal phase)\\n\\t/// @param player account taking the staking risk (can be a different account than the one controlling the gems)\\n\\t/// @param epoch epoch number on which this commit belongs to\\n\\tevent CommitmentCancelled(address indexed player, uint24 indexed epoch);\\n\\n\\t/// @notice A player has canceled a previous commitment by burning some tokens\\n\\t/// @param player the account that made the commitment\\n\\t/// @param epoch epoch number on which this commit belongs to\\n\\t/// @param amountBurnt amount of token to burn\\n\\t/// @param furtherMoves hash of further moves, unless bytes32(0) which indicate end.\\n\\tevent CommitmentVoid(address indexed player, uint24 indexed epoch, uint256 amountBurnt, bytes24 furtherMoves);\\n\\n\\t/// @notice Player has revealed its previous commitment\\n\\t/// @param player account who commited\\n\\t/// @param epoch epoch number on which this commit belongs to\\n\\t/// @param commitmentHash the hash of the moves\\n\\t/// @param moves the moves\\n\\t/// @param furtherMoves hash of further moves, unless bytes32(0) which indicate end.\\n\\tevent CommitmentRevealed(\\n\\t\\taddress indexed player,\\n\\t\\tuint24 indexed epoch,\\n\\t\\tbytes24 indexed commitmentHash,\\n\\t\\tMove[] moves,\\n\\t\\tbytes24 furtherMoves,\\n\\t\\tuint256 newReserveAmount\\n\\t);\\n\\n\\t/// @notice poke cell and update it if needed\\n\\t/// @param position cell to poke\\n\\t/// @param epoch epoch number at which the poke take place\\n\\tevent SinglePoke(uint24 indexed epoch, uint64 position);\\n\\n\\t/// @notice poke multiple cells and update them if needed\\n\\t/// @param positions cells to poke\\n\\t/// @param epoch epoch number at which the poke take place\\n\\tevent MultiPoke(uint24 indexed epoch, uint64[] positions);\\n\\n\\t/// @notice Player have withdrawn token from the reserve\\n\\t/// @param player account withdrawing the tokens\\n\\t/// @param amountWithdrawn the number of tokens withdrawnn\\n\\t/// @param newAmount the number of tokens in reserver as a result\\n\\tevent ReserveWithdrawn(address indexed player, uint256 amountWithdrawn, uint256 newAmount);\\n\\n\\t/// @notice Player has deposited token in the reserve, allowing it to use that much in game\\n\\t/// @param player account receiving the token in the reserve\\n\\t/// @param amountDeposited the number of tokens deposited\\n\\t/// @param newAmount the number of tokens in reserver as a result\\n\\tevent ReserveDeposited(address indexed player, uint256 amountDeposited, uint256 newAmount);\\n\\n\\t// --------------------------------------------------------------------------------------------\\n\\t// Event to make it easier to check what is happening\\n\\t// TODO get rid ?\\n\\t// --------------------------------------------------------------------------------------------\\n\\t/// @notice A move has been revealed.\\n\\t/// @param position cell at which the move take place\\n\\t/// @param player account making the move\\n\\t/// @param oldColor previous color of the cell\\n\\t/// @param newColor color that takes over\\n\\tevent MoveProcessed(uint64 indexed position, address indexed player, Color oldColor, Color newColor);\\n}\\n\",\"keccak256\":\"0xa31c68808c3904baba4e312f979e29c6c835f43ff5f25d8321439b51051d610d\",\"license\":\"AGPL-3.0\"},\"src/game/interface/UsingStratagemsTypes.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"solidity-kit/solc_0.8/ERC721/interfaces/IERC721.sol\\\";\\nimport \\\"solidity-kit/solc_0.8/ERC165/interfaces/IERC165.sol\\\";\\nimport \\\"solidity-kit/solc_0.8/ERC20/ERC2612/interfaces/IERC20WithIERC2612.sol\\\";\\nimport \\\"solidity-kit/solc_0.8/debug/time/interfaces/ITime.sol\\\";\\n\\ninterface UsingStratagemsTypes {\\n\\t// --------------------------------------------------------------------------------------------\\n\\t// EXTERNAL TYPES\\n\\t// --------------------------------------------------------------------------------------------\\n\\n\\t/// @notice The set of possible color (None indicate the Cell is empty)\\n\\tenum Color {\\n\\t\\tNone,\\n\\t\\tBlue,\\n\\t\\tRed,\\n\\t\\tGreen,\\n\\t\\tYellow,\\n\\t\\tPurple,\\n\\t\\tEvil\\n\\t}\\n\\n\\t/// @notice Move struct that define position and color\\n\\tstruct Move {\\n\\t\\tuint64 position; // TODO make it bigger ? uint32 * uint32 is probably infinitely big enough\\n\\t\\tColor color;\\n\\t}\\n\\n\\t/// @notice Permit struct to authorize EIP2612 ERC20 contracts\\n\\tstruct Permit {\\n\\t\\tuint256 value;\\n\\t\\tuint256 deadline;\\n\\t\\tuint8 v;\\n\\t\\tbytes32 r;\\n\\t\\tbytes32 s;\\n\\t}\\n\\n\\t/// @notice Config struct to configure the game instance\\n\\tstruct Config {\\n\\t\\tIERC20WithIERC2612 tokens;\\n\\t\\taddress payable burnAddress;\\n\\t\\tuint256 startTime;\\n\\t\\tuint256 commitPhaseDuration;\\n\\t\\tuint256 revealPhaseDuration;\\n\\t\\tuint8 maxLife;\\n\\t\\tuint256 numTokensPerGems;\\n\\t\\tITime time;\\n\\t}\\n\\n\\t/// @notice Cell struct representing the current state of a cell\\n\\tstruct FullCell {\\n\\t\\taddress owner;\\n\\t\\tuint24 lastEpochUpdate;\\n\\t\\tuint24 epochWhenTokenIsAdded;\\n\\t\\tColor color;\\n\\t\\tuint8 life;\\n\\t\\tint8 delta;\\n\\t\\tuint8 enemyMap;\\n\\t\\tuint8 distribution;\\n\\t\\tuint8 stake; // for Evil, else always 1\\n\\t}\\n\\n\\t// --------------------------------------------------------------------------------------------\\n\\t// STORAGE TYPES\\n\\t// --------------------------------------------------------------------------------------------\\n\\tstruct Cell {\\n\\t\\tuint24 lastEpochUpdate;\\n\\t\\tuint24 epochWhenTokenIsAdded;\\n\\t\\tColor color;\\n\\t\\tuint8 life;\\n\\t\\tint8 delta;\\n\\t\\tuint8 enemyMap;\\n\\t\\tuint8 distribution; // this encode who is left to be given reward (4 left most bits) and the reard (4 most right bits)\\n\\t\\tuint8 stake; // for Evil, else always 1\\n\\t}\\n\\n\\tstruct Commitment {\\n\\t\\tbytes24 hash;\\n\\t\\tuint24 epoch;\\n\\t}\\n\\n\\t// --------------------------------------------------------------------------------------------\\n\\t// INTERNAL TYPES\\n\\t// --------------------------------------------------------------------------------------------\\n\\n\\tstruct TokenTransfer {\\n\\t\\taddress payable to;\\n\\t\\tuint256 amount;\\n\\t}\\n\\n\\tstruct TokenTransferCollection {\\n\\t\\tTokenTransfer[] transfers;\\n\\t\\tuint256 numTransfers;\\n\\t}\\n\\n\\tstruct MoveTokens {\\n\\t\\tuint256 tokensPlaced;\\n\\t\\tuint256 tokensBurnt;\\n\\t\\tuint256 tokensReturned;\\n\\t}\\n}\\n\",\"keccak256\":\"0x74dccbc74f8784b15cd308e38359e56cdc6fbd7a1b3600678010c387e1410137\",\"license\":\"AGPL-3.0\"},\"src/game/internal/UsingStratagemsSetters.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./UsingStratagemsState.sol\\\";\\nimport \\\"../interface/UsingStratagemsEvents.sol\\\";\\nimport \\\"./UsingStratagemsUtils.sol\\\";\\nimport \\\"../../utils/PositionUtils.sol\\\";\\n\\nabstract contract UsingStratagemsSetters is UsingStratagemsState, UsingStratagemsUtils {\\n\\tusing PositionUtils for uint64;\\n\\n\\tconstructor(Config memory config) UsingStratagemsState(config) {}\\n\\n\\tfunction _makeCommitment(address player, bytes24 commitmentHash, uint256 inReserve) internal {\\n\\t\\tCommitment storage commitment = _commitments[player];\\n\\n\\t\\t(uint24 epoch, bool commiting) = _epoch();\\n\\n\\t\\tif (!commiting) {\\n\\t\\t\\trevert InRevealPhase();\\n\\t\\t}\\n\\t\\tif (commitment.epoch != 0 && commitment.epoch != epoch) {\\n\\t\\t\\trevert PreviousCommitmentNotRevealed();\\n\\t\\t}\\n\\n\\t\\tcommitment.hash = commitmentHash;\\n\\t\\tcommitment.epoch = epoch;\\n\\n\\t\\t// for withdrawal, we still require a minimal reserve so player cannot change their mind without losing at least one token\\n\\t\\t// TODO we might want to increase that value to 10x as 10 moves might quite common, at least on some networks\\n\\t\\tif (inReserve < NUM_TOKENS_PER_GEMS) {\\n\\t\\t\\t// TODO? special error for this case ?\\n\\t\\t\\trevert ReserveTooLow(inReserve, NUM_TOKENS_PER_GEMS);\\n\\t\\t}\\n\\n\\t\\temit CommitmentMade(player, epoch, commitmentHash);\\n\\t}\\n\\n\\tfunction _resolveMoves(\\n\\t\\taddress player,\\n\\t\\tuint24 epoch,\\n\\t\\tMove[] memory moves,\\n\\t\\taddress tokenGiver\\n\\t) internal returns (uint256 newReserveAmount) {\\n\\t\\t// max number of transfer is (4+1) * moves.length\\n\\t\\t// (for each move's cell's neighbours potentially being a different account)\\n\\t\\t// limiting the number of move per commitment reveal to 32 or, even more probably, should cover this unlikely scenario\\n\\t\\tTokenTransferCollection memory transferCollection = TokenTransferCollection({\\n\\t\\t\\ttransfers: new TokenTransfer[](moves.length * 5),\\n\\t\\t\\tnumTransfers: 0\\n\\t\\t});\\n\\t\\tMoveTokens memory tokens;\\n\\t\\tfor (uint256 i = 0; i < moves.length; i++) {\\n\\t\\t\\t(uint256 placed, uint256 burnt, uint256 returned) = _computeMove(\\n\\t\\t\\t\\ttransferCollection,\\n\\t\\t\\t\\tplayer,\\n\\t\\t\\t\\tepoch,\\n\\t\\t\\t\\tmoves[i]\\n\\t\\t\\t);\\n\\n\\t\\t\\ttokens.tokensPlaced += placed;\\n\\t\\t\\ttokens.tokensBurnt += burnt;\\n\\t\\t\\ttokens.tokensReturned += returned;\\n\\t\\t}\\n\\n\\t\\tlogger.logTransfers(0, \\\"resolveMoves\\\", transferCollection);\\n\\n\\t\\t_multiTransfer(TOKENS, transferCollection);\\n\\n\\t\\tnewReserveAmount = _tokensInReserve[player];\\n\\n\\t\\t// Note: even if funds can comes from outside the reserve, we still check it\\n\\t\\t// This ensure player have to have a reserve and cannot escape the slash if not\\n\\t\\tif (newReserveAmount < tokens.tokensPlaced + tokens.tokensBurnt) {\\n\\t\\t\\trevert ReserveTooLow(newReserveAmount, tokens.tokensPlaced + tokens.tokensBurnt);\\n\\t\\t}\\n\\t\\tif (tokenGiver == address(0)) {\\n\\t\\t\\tnewReserveAmount -= tokens.tokensPlaced + tokens.tokensBurnt;\\n\\t\\t\\t_tokensInReserve[player] = newReserveAmount;\\n\\t\\t} else {\\n\\t\\t\\tif (tokens.tokensPlaced != 0) {\\n\\t\\t\\t\\t// TODO use TransferCollection too here\\n\\t\\t\\t\\tTOKENS.transferFrom(tokenGiver, address(this), tokens.tokensPlaced);\\n\\t\\t\\t}\\n\\t\\t\\tif (tokens.tokensBurnt != 0) {\\n\\t\\t\\t\\t// TODO use TransferCollection too here\\n\\t\\t\\t\\tTOKENS.transferFrom(tokenGiver, BURN_ADDRESS, tokens.tokensBurnt);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// option to return in reserve ?\\n\\t\\t// TODO use TransferCollection too here\\n\\t\\tif (tokens.tokensReturned != 0) {\\n\\t\\t\\t// console.log(\\\"tokensReturned\\\");\\n\\t\\t\\t// console.log(tokens.tokensReturned);\\n\\t\\t\\tTOKENS.transfer(player, tokens.tokensReturned);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _countBits(uint8 n) internal pure returns (uint8 count) {\\n\\t\\twhile (n != 0) {\\n\\t\\t\\tn = n & (n - 1);\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\t// Note on COLLISION\\n\\t// If one color was used more than other, we could consider the cell having N owner and N times the number of tokens\\n\\t// such cells would be a good target for others\\n\\t// On the other end, on winning agains other cells, owner of such cell would have to divide the winnings\\n\\t// TODO revisit this\\n\\t// we could also refund the part\\n\\t// so if there is 3 green 2 blue and 1 red, then green win and the cell become green\\n\\t// player we put blue or red get refunded their respective gems\\n\\t// the players we put green get refunded 2/3 so that the cell still contains only 1\\n\\t// if there was 3 green and 3 blue and 1 red then the cell becomes black\\n\\t// every player get refunded 6/7 so that the black cell only has 1\\n\\t// note that the issue with green winning above is that winnings need to be distributed to all 3 players we put green\\n\\t// and since the number is technically unbounded, we have to use a splitter contract where player withdraw their winnings\\n\\t// this add UX complexity and some cost for withdrawals\\n\\tfunction _computeMove(\\n\\t\\tTokenTransferCollection memory transferCollection,\\n\\t\\taddress player,\\n\\t\\tuint24 epoch,\\n\\t\\tMove memory move\\n\\t) internal returns (uint256 tokensPlaced, uint256 tokensBurnt, uint256 tokensReturned) {\\n\\t\\tCell memory currentState = _getUpdatedCell(move.position, epoch);\\n\\n\\t\\tlogger.logCell(\\n\\t\\t\\t0,\\n\\t\\t\\tstring.concat(\\\"_computeMove at epoch \\\", Strings.toString(epoch)),\\n\\t\\t\\tmove.position,\\n\\t\\t\\tcurrentState,\\n\\t\\t\\taddress(uint160(_owners[move.position]))\\n\\t\\t);\\n\\n\\t\\t// we might have distribution still to do\\n\\t\\tuint8 distribution = currentState.distribution;\\n\\t\\tif (currentState.life == 0 && currentState.lastEpochUpdate != 0) {\\n\\t\\t\\t// if we just died, currentState.lastEpochUpdate > 0\\n\\t\\t\\t// we have to distribute to all\\n\\t\\t\\tdistribution = (currentState.enemyMap << 4) + _countBits(currentState.enemyMap);\\n\\n\\t\\t\\t/// we are now dead for real\\n\\t\\t\\tcurrentState.lastEpochUpdate = 0;\\n\\t\\t}\\n\\n\\t\\t// we then apply our move:\\n\\n\\t\\t// first we do some validity checks\\n\\t\\tif (move.color == Color.None) {\\n\\t\\t\\tif (currentState.life != MAX_LIFE || _ownerOf(move.position) != player) {\\n\\t\\t\\t\\t// invalid move\\n\\t\\t\\t\\treturn (0, 0, NUM_TOKENS_PER_GEMS);\\n\\t\\t\\t}\\n\\n\\t\\t\\t_collectTransfer(transferCollection, TokenTransfer({to: payable(player), amount: NUM_TOKENS_PER_GEMS}));\\n\\t\\t}\\n\\t\\t// then we consider the case of collision and transform such move as Color Evil\\n\\t\\telse if (currentState.epochWhenTokenIsAdded == epoch) {\\n\\t\\t\\tif (currentState.life != 0) {\\n\\t\\t\\t\\tmove.color = Color.Evil;\\n\\t\\t\\t\\t// TODO Add further stake, or do we burn? or return?\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// invalid move, on top of a MAX, that become None ?\\n\\t\\t\\t\\treturn (0, 0, NUM_TOKENS_PER_GEMS);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t(int8 newDelta, uint8 newEnemyMap) = _propagate(\\n\\t\\t\\ttransferCollection,\\n\\t\\t\\tmove,\\n\\t\\t\\tepoch,\\n\\t\\t\\tcurrentState.color,\\n\\t\\t\\tdistribution,\\n\\t\\t\\tcurrentState.stake\\n\\t\\t);\\n\\n\\t\\temit MoveProcessed(move.position, player, currentState.color, move.color);\\n\\t\\tcurrentState.color = move.color;\\n\\t\\tcurrentState.distribution = 0;\\n\\t\\tcurrentState.epochWhenTokenIsAdded = epoch; // used to prevent overwriting, even Color.None\\n\\n\\t\\tif (currentState.color == Color.None) {\\n\\t\\t\\tcurrentState.life = 0;\\n\\t\\t\\tcurrentState.stake = 0;\\n\\t\\t\\tcurrentState.lastEpochUpdate = 0;\\n\\t\\t\\tcurrentState.delta = 0;\\n\\t\\t\\tcurrentState.enemyMap = 0;\\n\\t\\t\\t_owners[move.position] = 0;\\n\\t\\t\\ttokensReturned = NUM_TOKENS_PER_GEMS;\\n\\t\\t} else {\\n\\t\\t\\ttokensPlaced = NUM_TOKENS_PER_GEMS;\\n\\n\\t\\t\\tcurrentState.enemyMap = newEnemyMap;\\n\\n\\t\\t\\tif (currentState.color == Color.Evil && currentState.life != 0) {\\n\\t\\t\\t\\tunchecked {\\n\\t\\t\\t\\t\\tcurrentState.stake += 1;\\n\\t\\t\\t\\t\\tif (currentState.stake == 0) {\\n\\t\\t\\t\\t\\t\\t// we cap it, losing stake there\\n\\t\\t\\t\\t\\t\\t// TODO reevaluate\\n\\t\\t\\t\\t\\t\\tcurrentState.stake = 255;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tcurrentState.stake = 1;\\n\\t\\t\\t}\\n\\n\\t\\t\\tcurrentState.delta = newDelta;\\n\\t\\t\\tcurrentState.life = 1;\\n\\t\\t\\tcurrentState.lastEpochUpdate = epoch;\\n\\t\\t\\tif (currentState.color == Color.Evil) {\\n\\t\\t\\t\\t_owners[move.position] = uint256(uint160(0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF));\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t_owners[move.position] = uint256(uint160(player));\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t_cells[move.position] = currentState;\\n\\n\\t\\tlogger.logCell(\\n\\t\\t\\t0,\\n\\t\\t\\tstring.concat(\\\"AFTER \\\", Strings.toString(epoch)),\\n\\t\\t\\tmove.position,\\n\\t\\t\\tcurrentState,\\n\\t\\t\\taddress(uint160(_owners[move.position]))\\n\\t\\t);\\n\\t}\\n\\n\\tfunction _propagate(\\n\\t\\tTokenTransferCollection memory transferCollection,\\n\\t\\tMove memory move,\\n\\t\\tuint24 epoch,\\n\\t\\tColor color,\\n\\t\\tuint8 distribution,\\n\\t\\tuint8 stake\\n\\t) internal returns (int8 newDelta, uint8 newEnemyMap) {\\n\\t\\t(\\n\\t\\t\\tint8 newComputedDelta,\\n\\t\\t\\tuint8 newComputedEnemyMap,\\n\\t\\t\\tuint16 numDue,\\n\\t\\t\\taddress[4] memory ownersToPay\\n\\t\\t) = _updateNeighbours(move.position, epoch, color, move.color, distribution);\\n\\n\\t\\tif (numDue > 0) {\\n\\t\\t\\t_collectTransfer(\\n\\t\\t\\t\\ttransferCollection,\\n\\t\\t\\t\\tTokenTransfer({to: payable(_ownerOf(move.position)), amount: (numDue * NUM_TOKENS_PER_GEMS) / 12})\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\tfor (uint8 i = 0; i < 4; i++) {\\n\\t\\t\\tif (ownersToPay[i] != address(0)) {\\n\\t\\t\\t\\t_collectTransfer(\\n\\t\\t\\t\\t\\ttransferCollection,\\n\\t\\t\\t\\t\\tTokenTransfer({\\n\\t\\t\\t\\t\\t\\tto: payable(ownersToPay[i]),\\n\\t\\t\\t\\t\\t\\tamount: stake * (NUM_TOKENS_PER_GEMS / (distribution & 0x0f))\\n\\t\\t\\t\\t\\t})\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tnewDelta = newComputedDelta;\\n\\t\\tnewEnemyMap = newComputedEnemyMap;\\n\\t}\\n\\n\\tfunction _poke(TokenTransferCollection memory transferCollection, uint64 position, uint24 epoch) internal {\\n\\t\\tCell memory currentState = _getUpdatedCell(position, epoch);\\n\\n\\t\\tlogger.logCell(\\n\\t\\t\\t0,\\n\\t\\t\\tstring.concat(\\\"_poke at epoch \\\", Strings.toString(epoch)),\\n\\t\\t\\tposition,\\n\\t\\t\\tcurrentState,\\n\\t\\t\\taddress(uint160(_owners[position]))\\n\\t\\t);\\n\\n\\t\\t// we might have distribution still to do\\n\\t\\tuint8 distribution = currentState.distribution;\\n\\t\\tif (currentState.life == 0 && currentState.lastEpochUpdate != 0) {\\n\\t\\t\\t// if we just died, currentState.lastEpochUpdate > 0\\n\\t\\t\\t// we have to distribute to all\\n\\t\\t\\tdistribution = (currentState.enemyMap << 4) + _countBits(currentState.enemyMap);\\n\\n\\t\\t\\t/// we are now dead for real\\n\\t\\t\\tcurrentState.lastEpochUpdate = 0;\\n\\t\\t}\\n\\n\\t\\t(, , uint16 numDue, address[4] memory ownersToPay) = _updateNeighbours(\\n\\t\\t\\tposition,\\n\\t\\t\\tepoch,\\n\\t\\t\\tcurrentState.color,\\n\\t\\t\\tcurrentState.color,\\n\\t\\t\\tdistribution\\n\\t\\t);\\n\\n\\t\\tif (numDue > 0) {\\n\\t\\t\\t_collectTransfer(\\n\\t\\t\\t\\ttransferCollection,\\n\\t\\t\\t\\tTokenTransfer({to: payable(_ownerOf(position)), amount: (numDue * NUM_TOKENS_PER_GEMS) / 12})\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\tfor (uint8 i = 0; i < 4; i++) {\\n\\t\\t\\tif (ownersToPay[i] != address(0)) {\\n\\t\\t\\t\\t_collectTransfer(\\n\\t\\t\\t\\t\\ttransferCollection,\\n\\t\\t\\t\\t\\tTokenTransfer({\\n\\t\\t\\t\\t\\t\\tto: payable(ownersToPay[i]),\\n\\t\\t\\t\\t\\t\\tamount: currentState.stake * (NUM_TOKENS_PER_GEMS / (distribution & 0x0f))\\n\\t\\t\\t\\t\\t})\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tlogger.logCell(\\n\\t\\t\\t0,\\n\\t\\t\\tstring.concat(\\\"AFTER poke (before zeroed distribution) at epoch \\\", Strings.toString(epoch)),\\n\\t\\t\\tposition,\\n\\t\\t\\tcurrentState,\\n\\t\\t\\taddress(uint160(_owners[position]))\\n\\t\\t);\\n\\n\\t\\tcurrentState.distribution = 0;\\n\\t\\t_cells[position] = currentState;\\n\\t}\\n\\n\\tfunction _updateNeighbours(\\n\\t\\tuint64 position,\\n\\t\\tuint24 epoch,\\n\\t\\tColor oldColor,\\n\\t\\tColor newColor,\\n\\t\\tuint8 distribution\\n\\t) internal returns (int8 newDelta, uint8 newenemyMap, uint16 numDue, address[4] memory ownersToPay) {\\n\\t\\tunchecked {\\n\\t\\t\\tlogger.logPosition(\\\"from\\\", position);\\n\\t\\t\\tconsole.log(\\\"distribution %i %i\\\", distribution >> 4, distribution & 0x0F);\\n\\n\\t\\t\\tint8 enemyOrFriend;\\n\\t\\t\\tuint16 due;\\n\\t\\t\\t{\\n\\t\\t\\t\\tuint64 upPosition = position.offset(0, -1);\\n\\t\\t\\t\\tlogger.logPosition(\\\"upPosition\\\", upPosition);\\n\\t\\t\\t\\t(enemyOrFriend, due) = _updateCell(upPosition, epoch, 2, oldColor, newColor);\\n\\t\\t\\t\\tif (enemyOrFriend < 0) {\\n\\t\\t\\t\\t\\tnewenemyMap = newenemyMap | 1;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tnumDue += due;\\n\\t\\t\\t\\tif ((distribution >> 4) & 1 == 1) {\\n\\t\\t\\t\\t\\tconsole.log(\\\"upPosition %i\\\", distribution);\\n\\t\\t\\t\\t\\t// TODO?: if we decide to group owner in the cell struct, we should get the cell in memory in that function\\n\\t\\t\\t\\t\\townersToPay[0] = _ownerOf(upPosition);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tnewDelta += enemyOrFriend;\\n\\t\\t\\t}\\n\\t\\t\\t{\\n\\t\\t\\t\\tuint64 leftPosition = position.offset(-1, 0);\\n\\t\\t\\t\\tlogger.logPosition(\\\"leftPosition\\\", leftPosition);\\n\\t\\t\\t\\t(enemyOrFriend, due) = _updateCell(leftPosition, epoch, 3, oldColor, newColor);\\n\\t\\t\\t\\tif (enemyOrFriend < 0) {\\n\\t\\t\\t\\t\\tnewenemyMap = newenemyMap | 2;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tnumDue += due;\\n\\t\\t\\t\\tif ((distribution >> 4) & 2 == 2) {\\n\\t\\t\\t\\t\\tconsole.log(\\\"leftPosition %i\\\", distribution);\\n\\t\\t\\t\\t\\townersToPay[1] = _ownerOf(leftPosition);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tnewDelta += enemyOrFriend;\\n\\t\\t\\t}\\n\\n\\t\\t\\t{\\n\\t\\t\\t\\tuint64 downPosition = position.offset(0, 1);\\n\\t\\t\\t\\tlogger.logPosition(\\\"downPosition\\\", downPosition);\\n\\t\\t\\t\\t(enemyOrFriend, due) = _updateCell(downPosition, epoch, 0, oldColor, newColor);\\n\\t\\t\\t\\tif (enemyOrFriend < 0) {\\n\\t\\t\\t\\t\\tnewenemyMap = newenemyMap | 4;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tnumDue += due;\\n\\t\\t\\t\\tif ((distribution >> 4) & 4 == 4) {\\n\\t\\t\\t\\t\\tconsole.log(\\\"downPosition %i\\\", distribution);\\n\\t\\t\\t\\t\\townersToPay[2] = _ownerOf(downPosition);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tnewDelta += enemyOrFriend;\\n\\t\\t\\t}\\n\\t\\t\\t{\\n\\t\\t\\t\\tuint64 rightPosition = position.offset(1, 0);\\n\\t\\t\\t\\tlogger.logPosition(\\\"rightPosition\\\", rightPosition);\\n\\t\\t\\t\\t(enemyOrFriend, due) = _updateCell(rightPosition, epoch, 1, oldColor, newColor);\\n\\t\\t\\t\\tif (enemyOrFriend < 0) {\\n\\t\\t\\t\\t\\tnewenemyMap = newenemyMap | 8;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tnumDue += due;\\n\\t\\t\\t\\tif ((distribution >> 4) & 8 == 8) {\\n\\t\\t\\t\\t\\tconsole.log(\\\"rightPosition %i\\\", distribution);\\n\\t\\t\\t\\t\\townersToPay[3] = _ownerOf(rightPosition);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tnewDelta += enemyOrFriend;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev This update the cell in storage\\n\\tfunction _updateCell(\\n\\t\\tuint64 position, // position to update\\n\\t\\tuint24 epoch,\\n\\t\\tuint8 neighbourIndex, // index from point of view of cell being updated\\n\\t\\tColor oldColor, // old Color of the neighbor\\n\\t\\tColor newColor // new color of the neighbor\\n\\t) internal returns (int8 enemyOrFriend, uint16 due) {\\n\\t\\tCell memory cell = _cells[position];\\n\\n\\t\\tuint24 lastUpdate = cell.lastEpochUpdate;\\n\\t\\tColor color = cell.color;\\n\\t\\tif (color != Color.None) {\\n\\t\\t\\t// if the color of the cell being update is not Nome\\n\\t\\t\\t// we then check the neighbor new color\\n\\t\\t\\t// if it same as the cell color, then we report the cell as friendly to the neighbor\\n\\t\\t\\t// else it is an enemy\\n\\t\\t\\t// note that _updateCell should only be called if oldColor != newColor\\n\\t\\t\\tenemyOrFriend = color == newColor ? int8(1) : int8(-1);\\n\\t\\t}\\n\\t\\tif (lastUpdate >= 1 && color != Color.None) {\\n\\t\\t\\t// we only consider cell with color that are not dead\\n\\t\\t\\tif (cell.life > 0 && lastUpdate < epoch) {\\n\\t\\t\\t\\t// of there is life to update we compute the new life\\n\\t\\t\\t\\t(uint8 newLife, uint24 epochUsed) = _computeNewLife(\\n\\t\\t\\t\\t\\tlastUpdate,\\n\\t\\t\\t\\t\\tcell.enemyMap,\\n\\t\\t\\t\\t\\tcell.delta,\\n\\t\\t\\t\\t\\tcell.life,\\n\\t\\t\\t\\t\\tepoch\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\tdue = _updateCellFromNeighbor(position, cell, newLife, epochUsed, neighbourIndex, oldColor, newColor);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tdue = _updateCellFromNeighbor(position, cell, cell.life, epoch, neighbourIndex, oldColor, newColor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _updateCellFromNeighbor(\\n\\t\\tuint64 position, // position of the cell to be updated\\n\\t\\tCell memory cell, // cell to be updated\\n\\t\\tuint8 newLife, // new life value for the celll\\n\\t\\tuint24 epoch, // epoch at which the update occured (epochUsed TODO: confirm its use)\\n\\t\\tuint8 neighbourIndex, // the neighbor triggering the update and for which we return whether it should receive its due\\n\\t\\tColor oldColor, // old color of that neighbor\\n\\t\\tColor newColor // new color of that neighbor\\n\\t) internal returns (uint16 due) {\\n\\t\\tif (cell.life > 0 && newLife == 0) {\\n\\t\\t\\t// we just died, we establish the distributionMap and counts\\n\\t\\t\\tcell.distribution = (cell.enemyMap << 4) + _countBits(cell.enemyMap);\\n\\t\\t}\\n\\n\\t\\tlogger.logCell(\\n\\t\\t\\t0,\\n\\t\\t\\tstring.concat(\\\"_updateCellFromNeighbor  index\\\", Strings.toString(neighbourIndex)),\\n\\t\\t\\tposition,\\n\\t\\t\\tcell,\\n\\t\\t\\taddress(uint160(_owners[position]))\\n\\t\\t);\\n\\n\\t\\tif ((cell.distribution >> 4) & (2 ** neighbourIndex) == 2 ** neighbourIndex) {\\n\\t\\t\\tdue = (cell.stake * 12) / (cell.distribution & 0x0f);\\n\\t\\t\\tcell.distribution =\\n\\t\\t\\t\\t(uint8(uint256(cell.distribution >> 4) & (~(2 ** uint256(neighbourIndex)))) << 4) +\\n\\t\\t\\t\\t(cell.distribution & 0x0f);\\n\\t\\t}\\n\\n\\t\\tif (oldColor != newColor) {\\n\\t\\t\\tif (newColor == Color.None) {\\n\\t\\t\\t\\tif (cell.color == oldColor) {\\n\\t\\t\\t\\t\\tcell.delta -= 1;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tcell.delta += 1;\\n\\t\\t\\t\\t\\tcell.enemyMap = cell.enemyMap & uint8((1 << neighbourIndex) ^ 0xFF);\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else if (cell.color == oldColor) {\\n\\t\\t\\t\\t// then newColor is different (see assert above)\\n\\t\\t\\t\\tcell.enemyMap = cell.enemyMap | uint8(1 << neighbourIndex);\\n\\t\\t\\t\\tcell.delta -= 2;\\n\\t\\t\\t} else if (cell.color == newColor) {\\n\\t\\t\\t\\t// then old color was different\\n\\t\\t\\t\\tcell.delta += (oldColor == Color.None ? int8(1) : int8(2));\\n\\t\\t\\t\\tcell.enemyMap = cell.enemyMap & uint8((1 << neighbourIndex) ^ 0xFF);\\n\\t\\t\\t} else if (oldColor == Color.None) {\\n\\t\\t\\t\\t// if there were no oldCOlor and the newColor is not your (already checked in previous if clause)\\n\\t\\t\\t\\tcell.delta -= 1;\\n\\t\\t\\t\\tcell.enemyMap = cell.enemyMap | uint8(1 << neighbourIndex);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tcell.lastEpochUpdate = epoch;\\n\\t\\tcell.life = newLife;\\n\\n\\t\\tlogger.logCell(\\n\\t\\t\\t0,\\n\\t\\t\\tstring.concat(\\\"AFTER _updateCellFromNeighbor  index\\\", Strings.toString(neighbourIndex)),\\n\\t\\t\\tposition,\\n\\t\\t\\tcell,\\n\\t\\t\\taddress(uint160(_owners[position]))\\n\\t\\t);\\n\\n\\t\\t_cells[position] = cell;\\n\\t}\\n}\\n\",\"keccak256\":\"0xd8a9b280bdb0aeaa100d95d9b86f3422c3bd3685b54da42b6c9f353e67a19383\",\"license\":\"AGPL-3.0\"},\"src/game/internal/UsingStratagemsState.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./UsingStratagemsStore.sol\\\";\\nimport \\\"../interface/UsingStratagemsEvents.sol\\\";\\nimport \\\"../interface/UsingStratagemsErrors.sol\\\";\\nimport \\\"./UsingVirtualTime.sol\\\";\\nimport \\\"../../utils/PositionUtils.sol\\\";\\n\\n// TODO use hardhat-preprocessor\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary logger {\\n    using PositionUtils for uint64;\\n\\n    address constant CONSOLE_ADDRESS = 0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayload(bytes memory payload) private view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(staticcall(gas(), consoleAddress, add(payload, 32), mload(payload), 0, 0))\\n        }\\n    }\\n\\n    // _sendLogPayload(abi.encodeWithSignature('log(string,int256,int256)', 'cell %s', x, y));\\n\\n    function logPosition(string memory title, uint64 pos) internal view {\\n        (int32 x, int32 y) = pos.toXY();\\n        console.log(\\\"%s: (%s,%s)\\\", title, Strings.toString(x), Strings.toString(y));\\n    }\\n\\n    function logCell(\\n        uint8 ii,\\n        string memory title,\\n        uint64 id,\\n        UsingStratagemsTypes.Cell memory cell,\\n        address owner\\n    ) internal view {\\n        string memory indent = ii == 0\\n            ? \\\"\\\"\\n            : ii == 1\\n                ? \\\"    \\\"\\n                : ii == 2\\n                    ? \\\"        \\\"\\n                    : \\\"            \\\";\\n        // string memory indent = '';\\n        console.log(\\\"%s%s\\\", indent, title);\\n        (int32 x, int32 y) = id.toXY();\\n        console.log(\\\"%s-------------------------------------------------------------\\\", indent);\\n        console.log(\\\"%scell (%s,%s)\\\", indent, Strings.toString(x), Strings.toString(y));\\n        console.log(\\\"%s-------------------------------------------------------------\\\", indent);\\n        console.log(\\\"%s - lastEpochUpdate:  %s\\\", indent, cell.lastEpochUpdate);\\n        console.log(\\\"%s - epochWhenTokenIsAdded:  %s\\\", indent, cell.epochWhenTokenIsAdded);\\n        console.log(\\\"%s - color:  %s\\\", indent, uint8(cell.color));\\n        console.log(\\\"%s - life:  %s\\\", indent, cell.life);\\n        console.log(\\\"%s - distribution:  %s\\\", indent, cell.distribution);\\n        console.log(\\\"%s - owner:  %s\\\", indent, owner);\\n        console.log(\\\"%s - delta: %s\\\", indent, Strings.toString(cell.delta));\\n        console.log(\\\"%s - enemyMap:  %s\\\", indent, cell.enemyMap);\\n        console.log(\\\"%s-------------------------------------------------------------\\\", indent);\\n    }\\n\\n    function logTransfers(\\n        uint8 ii,\\n        string memory title,\\n        UsingStratagemsTypes.TokenTransferCollection memory transferCollection\\n    ) internal pure {\\n        string memory indent = ii == 0\\n            ? \\\"\\\"\\n            : ii == 1\\n                ? \\\"    \\\"\\n                : ii == 2\\n                    ? \\\"        \\\"\\n                    : \\\"            \\\";\\n        // string memory indent = '';\\n        console.log(\\\"%s%s\\\", indent, title);\\n        console.log(\\\"%s-------------------------------------------------------------\\\", indent);\\n        for (uint256 i = 0; i < transferCollection.numTransfers; i++) {\\n            console.log(\\n                \\\"%stransfer (%s,%s)\\\",\\n                indent,\\n                transferCollection.transfers[i].to,\\n                Strings.toString(transferCollection.transfers[i].amount)\\n            );\\n        }\\n        console.log(\\\"%s-------------------------------------------------------------\\\", indent);\\n    }\\n}\\n\\nabstract contract UsingStratagemsState is\\n    UsingStratagemsStore,\\n    UsingStratagemsEvents,\\n    UsingStratagemsErrors,\\n    UsingVirtualTime\\n{\\n    /// @notice The token used for the game. Each gems on the board contains that token\\n    IERC20WithIERC2612 internal immutable TOKENS;\\n    /// @notice the timestamp (in seconds) at which the game start, it start in the commit phase\\n    uint256 internal immutable START_TIME;\\n    /// @notice the duration of the commit phase in seconds\\n    uint256 internal immutable COMMIT_PHASE_DURATION;\\n    /// @notice the duration of the reveal phase in seconds\\n    uint256 internal immutable REVEAL_PHASE_DURATION;\\n    /// @notice the max number of level a cell can reach in the game\\n    uint8 internal immutable MAX_LIFE;\\n    /// @notice the number of tokens underlying each gems on the board.\\n    uint256 internal immutable NUM_TOKENS_PER_GEMS;\\n    /// @notice the address to send the token to when burning\\n    address payable internal immutable BURN_ADDRESS;\\n\\n    /// @notice the number of moves a hash represent, after that players make use of furtherMoves\\n    uint8 internal constant MAX_NUM_MOVES_PER_HASH = 32;\\n\\n    /// @notice Create an instance of a Stratagems game\\n    /// @param config configuration options for the game\\n    constructor(Config memory config) UsingVirtualTime(config) {\\n        TOKENS = config.tokens;\\n        BURN_ADDRESS = config.burnAddress;\\n        START_TIME = config.startTime;\\n        COMMIT_PHASE_DURATION = config.commitPhaseDuration;\\n        REVEAL_PHASE_DURATION = config.revealPhaseDuration;\\n        MAX_LIFE = config.maxLife;\\n        NUM_TOKENS_PER_GEMS = config.numTokensPerGems;\\n    }\\n\\n    function _epoch() internal view virtual returns (uint24 epoch, bool commiting) {\\n        uint256 epochDuration = COMMIT_PHASE_DURATION + REVEAL_PHASE_DURATION;\\n        uint256 time = _timestamp();\\n        if (time < START_TIME) {\\n            revert GameNotStarted();\\n        }\\n        uint256 timePassed = time - START_TIME;\\n        epoch = uint24(timePassed / epochDuration + 2); // epoch start at 2, this make the hypothetical previous reveal phase's epoch to be 1\\n        commiting = timePassed - ((epoch - 2) * epochDuration) < COMMIT_PHASE_DURATION;\\n    }\\n\\n    function _computeNewLife(\\n        uint24 lastUpdate,\\n        uint8 enemyMap,\\n        int8 delta,\\n        uint8 life,\\n        uint24 epoch\\n    ) internal view returns (uint8 newLife, uint24 epochUsed) {\\n        epochUsed = lastUpdate;\\n        if (lastUpdate >= 1 && life > 0) {\\n            uint256 epochDelta = epoch - lastUpdate;\\n            if (epochDelta > 0) {\\n                int8 effectiveDelta = delta != 0 ? delta : -1;\\n                if (effectiveDelta < 0 && enemyMap == 0) {\\n                    effectiveDelta = 0;\\n                }\\n                if (effectiveDelta > 0) {\\n                    // if (life < MAX_LIFE) {\\n                    uint8 maxEpoch = ((MAX_LIFE - life) + uint8(effectiveDelta) - 1) / uint8(effectiveDelta);\\n                    if (epochDelta > maxEpoch) {\\n                        epochDelta = maxEpoch;\\n                    }\\n\\n                    life += uint8(epochDelta) * uint8(effectiveDelta);\\n                    if (life > MAX_LIFE) {\\n                        life = MAX_LIFE;\\n                    }\\n                    newLife = life;\\n                    epochUsed = epoch;\\n                    // } else {\\n                    // \\tnewLife = life;\\n                    // \\tepochUsed = lastUpdate;\\n                    // }\\n                } else if (effectiveDelta < 0) {\\n                    uint8 numEpochBeforeDying = (life + uint8(-effectiveDelta) - 1) / uint8(-effectiveDelta);\\n                    if (epochDelta > numEpochBeforeDying) {\\n                        epochDelta = numEpochBeforeDying;\\n                    }\\n                    uint8 lifeLoss = uint8(epochDelta) * uint8(-effectiveDelta);\\n                    if (lifeLoss > life) {\\n                        newLife = 0;\\n                    } else {\\n                        newLife = life - lifeLoss;\\n                    }\\n                    epochUsed = lastUpdate + uint24(epochDelta);\\n                } else {\\n                    newLife = life;\\n                    epochUsed = epoch;\\n                }\\n            } else {\\n                newLife = life;\\n                epochUsed = lastUpdate;\\n            }\\n        }\\n    }\\n\\n    function _getUpdatedCell(uint64 position, uint24 epoch) internal view returns (Cell memory updatedCell) {\\n        // load from state\\n        updatedCell = _cells[position];\\n        uint24 lastUpdate = updatedCell.lastEpochUpdate;\\n        int8 delta = updatedCell.delta;\\n        uint8 life = updatedCell.life;\\n        // logger.logCell(0, 'before update', position, updatedCell, address(uint160(_owners[position])));\\n        if (lastUpdate >= 1 && life > 0) {\\n            (uint8 newLife, uint24 epochUsed) = _computeNewLife(lastUpdate, updatedCell.enemyMap, delta, life, epoch);\\n            updatedCell.life = newLife;\\n            updatedCell.lastEpochUpdate = epochUsed; // TODO check if this is useful to cap it to epoch where it died\\n        }\\n    }\\n\\n    /// @dev Get the owner of a token.\\n    /// @param tokenID The token to query.\\n    function _ownerOf(uint256 tokenID) internal view virtual returns (address owner) {\\n        owner = address(uint160(_owners[tokenID]));\\n    }\\n}\\n\",\"keccak256\":\"0xdbd284f70ce08e8de50c55d33d76e4873693f0b23996d8ac43e50f416b2ff570\",\"license\":\"AGPL-3.0\"},\"src/game/internal/UsingStratagemsStore.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport '../interface/UsingStratagemsTypes.sol';\\n\\ncontract UsingStratagemsStore is UsingStratagemsTypes {\\n\\tmapping(uint256 => Cell) internal _cells;\\n\\tmapping(uint256 => uint256) internal _owners; //owner + approval + ... erc721\\n\\n\\tmapping(address => uint256) internal _tokensInReserve;\\n\\tmapping(address => Commitment) internal _commitments;\\n\\n\\t// Operators (also used by ERC721)\\n\\tmapping(address => mapping(address => bool)) internal _operatorsForAll;\\n\\tmapping(uint256 => address) internal _operators;\\n\\n\\t// ERC721 balanceOf\\n\\t// mapping(address => uint256) internal _balances;\\n}\\n\",\"keccak256\":\"0x67d22bbc7eb4513799c8038a35e581d90ee2cb213051850ebd59f4e78cc44a2d\",\"license\":\"AGPL-3.0\"},\"src/game/internal/UsingStratagemsUtils.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport '../interface/UsingStratagemsTypes.sol';\\nimport '../interface/UsingStratagemsErrors.sol';\\n\\nabstract contract UsingStratagemsUtils is UsingStratagemsTypes, UsingStratagemsErrors {\\n\\tfunction _checkHash(\\n\\t\\tbytes24 commitmentHash,\\n\\t\\tbytes32 secret,\\n\\t\\tMove[] memory moves,\\n\\t\\tbytes24 furtherMoves\\n\\t) internal pure {\\n\\t\\tif (furtherMoves != bytes24(0)) {\\n\\t\\t\\tbytes24 computedHash = bytes24(keccak256(abi.encode(secret, moves, furtherMoves)));\\n\\t\\t\\tif (commitmentHash != computedHash) {\\n\\t\\t\\t\\trevert CommitmentHashNotMatching();\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tbytes24 computedHash = bytes24(keccak256(abi.encode(secret, moves)));\\n\\t\\t\\tif (commitmentHash != computedHash) {\\n\\t\\t\\t\\trevert CommitmentHashNotMatching();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _collectTransfer(\\n\\t\\tTokenTransferCollection memory transferCollection,\\n\\t\\tTokenTransfer memory newTransfer\\n\\t) internal pure {\\n\\t\\t// we look for the newTransfer address in case it is already present\\n\\t\\tfor (uint256 k = 0; k < transferCollection.numTransfers; k++) {\\n\\t\\t\\tif (transferCollection.transfers[k].to == newTransfer.to) {\\n\\t\\t\\t\\t// if we found we add the amount\\n\\t\\t\\t\\ttransferCollection.transfers[k].amount += newTransfer.amount;\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// if we did not find that address we add it to the end\\n\\t\\ttransferCollection.transfers[transferCollection.numTransfers].to = newTransfer.to;\\n\\t\\ttransferCollection.transfers[transferCollection.numTransfers].amount = newTransfer.amount;\\n\\t\\t// and increase the size to lookup for next time\\n\\t\\ttransferCollection.numTransfers++;\\n\\t}\\n\\n\\tfunction _multiTransfer(IERC20WithIERC2612 token, TokenTransferCollection memory transferCollection) internal {\\n\\t\\tfor (uint256 i = 0; i < transferCollection.numTransfers; i++) {\\n\\t\\t\\ttoken.transfer(transferCollection.transfers[i].to, transferCollection.transfers[i].amount);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x20ffcba1168cd6bf7b408c0265c79c8b56f022d36068e8188833ec3d1a06831d\",\"license\":\"AGPL-3.0\"},\"src/game/internal/UsingVirtualTime.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport '../interface/UsingStratagemsTypes.sol';\\n\\nabstract contract UsingVirtualTime {\\n\\t// TODO use hardhat-preprocessor\\n\\n\\tITime immutable _time;\\n\\n\\tconstructor(UsingStratagemsTypes.Config memory config) {\\n\\t\\t_time = config.time;\\n\\t}\\n\\n\\tfunction _timestamp() internal view returns (uint256) {\\n\\t\\tif (address(_time) == address(0)) {\\n\\t\\t\\treturn block.timestamp;\\n\\t\\t}\\n\\t\\treturn _time.timestamp();\\n\\t}\\n}\\n\",\"keccak256\":\"0x6c1bba64cb0dfac4895bd5f17aa979c1b7b6b386bac34dc1f3474b7d803c432c\",\"license\":\"AGPL-3.0\"},\"src/utils/PositionUtils.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nlibrary PositionUtils {\\n\\tfunction toXY(uint64 position) internal pure returns (int32 x, int32 y) {\\n\\t\\tx = int32(uint32(position) & 0xFFFFFFFF);\\n\\t\\ty = int32(uint32(position >> 32));\\n\\t}\\n\\n\\tfunction offset(uint64 position, int32 x, int32 y) internal pure returns (uint64 newPosition) {\\n\\t\\tx = int32(uint32(position) & 0xFFFFFFFF) + x;\\n\\t\\ty = int32(uint32(position >> 32)) + y;\\n\\t\\tnewPosition = (uint64(uint32(y)) << 32) + uint64(uint32(x));\\n\\t}\\n}\\n\",\"keccak256\":\"0xa03af20214488f58e3558c9fdfb514b9ff1ca2aaf0818268c0f6a416cf2dc511\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "storageLayout": {
    "storage": [
      {
        "astId": 13897,
        "contract": "src/game/debug/StratagemsDebug.sol:StratagemsDebug",
        "label": "_cells",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(Cell)11315_storage)"
      },
      {
        "astId": 13901,
        "contract": "src/game/debug/StratagemsDebug.sol:StratagemsDebug",
        "label": "_owners",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 13905,
        "contract": "src/game/debug/StratagemsDebug.sol:StratagemsDebug",
        "label": "_tokensInReserve",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13910,
        "contract": "src/game/debug/StratagemsDebug.sol:StratagemsDebug",
        "label": "_commitments",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(Commitment)11320_storage)"
      },
      {
        "astId": 13916,
        "contract": "src/game/debug/StratagemsDebug.sol:StratagemsDebug",
        "label": "_operatorsForAll",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 13920,
        "contract": "src/game/debug/StratagemsDebug.sol:StratagemsDebug",
        "label": "_operators",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes24": {
        "encoding": "inplace",
        "label": "bytes24",
        "numberOfBytes": "24"
      },
      "t_enum(Color)11237": {
        "encoding": "inplace",
        "label": "enum UsingStratagemsTypes.Color",
        "numberOfBytes": "1"
      },
      "t_int8": {
        "encoding": "inplace",
        "label": "int8",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(Commitment)11320_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct UsingStratagemsTypes.Commitment)",
        "numberOfBytes": "32",
        "value": "t_struct(Commitment)11320_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Cell)11315_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct UsingStratagemsTypes.Cell)",
        "numberOfBytes": "32",
        "value": "t_struct(Cell)11315_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Cell)11315_storage": {
        "encoding": "inplace",
        "label": "struct UsingStratagemsTypes.Cell",
        "members": [
          {
            "astId": 11299,
            "contract": "src/game/debug/StratagemsDebug.sol:StratagemsDebug",
            "label": "lastEpochUpdate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 11301,
            "contract": "src/game/debug/StratagemsDebug.sol:StratagemsDebug",
            "label": "epochWhenTokenIsAdded",
            "offset": 3,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 11304,
            "contract": "src/game/debug/StratagemsDebug.sol:StratagemsDebug",
            "label": "color",
            "offset": 6,
            "slot": "0",
            "type": "t_enum(Color)11237"
          },
          {
            "astId": 11306,
            "contract": "src/game/debug/StratagemsDebug.sol:StratagemsDebug",
            "label": "life",
            "offset": 7,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 11308,
            "contract": "src/game/debug/StratagemsDebug.sol:StratagemsDebug",
            "label": "delta",
            "offset": 8,
            "slot": "0",
            "type": "t_int8"
          },
          {
            "astId": 11310,
            "contract": "src/game/debug/StratagemsDebug.sol:StratagemsDebug",
            "label": "enemyMap",
            "offset": 9,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 11312,
            "contract": "src/game/debug/StratagemsDebug.sol:StratagemsDebug",
            "label": "distribution",
            "offset": 10,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 11314,
            "contract": "src/game/debug/StratagemsDebug.sol:StratagemsDebug",
            "label": "stake",
            "offset": 11,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Commitment)11320_storage": {
        "encoding": "inplace",
        "label": "struct UsingStratagemsTypes.Commitment",
        "members": [
          {
            "astId": 11317,
            "contract": "src/game/debug/StratagemsDebug.sol:StratagemsDebug",
            "label": "hash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes24"
          },
          {
            "astId": 11319,
            "contract": "src/game/debug/StratagemsDebug.sol:StratagemsDebug",
            "label": "epoch",
            "offset": 24,
            "slot": "0",
            "type": "t_uint24"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  },
  "userdoc": {
    "errors": {
      "CanStillReveal()": [
        {
          "notice": "Player have to reveal if they can Stratagems will prevent them from acknowledging missed reveal if there is still time to reveal."
        }
      ],
      "CommitmentHashNotMatching()": [
        {
          "notice": "Player have to reveal their commitment using the exact same move values  If they provide different value, the commitment hash will differ and Stratagems will reject their reveal."
        }
      ],
      "GameNotStarted()": [
        {
          "notice": "Game has not started yet, can't perform any action"
        }
      ],
      "InCommitmentPhase()": [
        {
          "notice": "When in Commit phase, player can make new commitment but they cannot reveal their move yet."
        }
      ],
      "InRevealPhase()": [
        {
          "notice": "When in Reveal phase, it is not possible to commit new moves or cancel previous commitment  During Reveal phase, players have to reveal their commitment, if not already done."
        }
      ],
      "InvalidEpoch()": [
        {
          "notice": "Player can only reveal their move in the same epoch they commited.abi  If a player reveal later it can only do to minimize the reserve burn cost by calling : `acknowledgeMissedReveal`"
        }
      ],
      "InvalidFurtherMoves()": [
        {
          "notice": "Player can make arbitrary number of moves per epoch. To do so they group moves into (MAX_NUM_MOVES_PER_HASH = 32) moves  This result in a recursive series of hash that they can then submit in turn while revealing.  The limit  (MAX_NUM_MOVES_PER_HASH = 32) ensure a reveal batch fits in a block."
        }
      ],
      "NotAuthorized()": [
        {
          "notice": "Not authorized to perform this operation"
        }
      ],
      "NothingToReveal()": [
        {
          "notice": "Player can only reveal moves they commited."
        }
      ],
      "PreviousCommitmentNotRevealed()": [
        {
          "notice": "Previous commitment need to be revealed before making a new one. Even if the corresponding reveal phase has passed.\\  It is also not possible to withdraw any amount from reserve until the commitment is revealed.\\If player lost the information to reveal, it can acknowledge failure which will burn all its reserve.\\"
        }
      ],
      "ReserveTooLow(uint256,uint256)": [
        {
          "notice": "to make a commitment you always need at least one `config.numTokensPerGems` amount in reserve  Player also need one `config.numTokensPerGems`  per moves during the Reveal phase."
        }
      ]
    },
    "events": {
      "CommitmentCancelled(address,uint24)": {
        "notice": "A player has cancelled its current commitment (before it reached the reveal phase)"
      },
      "CommitmentMade(address,uint24,bytes24)": {
        "notice": "A player has commited to make a move and reveal it on the reveal phase"
      },
      "CommitmentRevealed(address,uint24,bytes24,(uint64,uint8)[],bytes24,uint256)": {
        "notice": "Player has revealed its previous commitment"
      },
      "CommitmentVoid(address,uint24,uint256,bytes24)": {
        "notice": "A player has canceled a previous commitment by burning some tokens"
      },
      "MoveProcessed(uint64,address,uint8,uint8)": {
        "notice": "A move has been revealed."
      },
      "MultiPoke(uint24,uint64[])": {
        "notice": "poke multiple cells and update them if needed"
      },
      "ReserveDeposited(address,uint256,uint256)": {
        "notice": "Player has deposited token in the reserve, allowing it to use that much in game"
      },
      "ReserveWithdrawn(address,uint256,uint256)": {
        "notice": "Player have withdrawn token from the reserve"
      },
      "SinglePoke(uint24,uint64)": {
        "notice": "poke cell and update it if needed"
      }
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "argsData": "0x00000000000000000000000033a0d701f0619afb407963d6b7f9781dc40f9fcf000000000000000000000000deaddeaddeaddeaddeaddeaddeaddeaddeaddead000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000143700000000000000000000000000000000000000000000000000000000000000e1000000000000000000000000000000000000000000000000000000000000000070000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000052092c12759ac66d997d402c07d5449b3f2136f8",
  "transaction": {
    "hash": "0x8ce965c46ae2dcfa133074459959d795bb51c8418198bfb28706f75a0e856848",
    "origin": "0x61c461ecc993aadeb7e4b47e96d1b8cc37314b20"
  },
  "receipt": {
    "confirmations": 0,
    "blockHash": "0x8828ee3c00d5f59e00062b65bb13b3f172f61f558bf410bd3997cbfbfe26790e",
    "blockNumber": "0x3e8440",
    "transactionIndex": "0x1"
  }
}