{
  "address": "0x33a0d701f0619afb407963d6b7f9781dc40f9fcf",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "implementations",
              "type": "address[]"
            },
            {
              "internalType": "bytes5[]",
              "name": "sigMap",
              "type": "bytes5[]"
            },
            {
              "internalType": "address",
              "name": "fallbackImplementation",
              "type": "address"
            }
          ],
          "internalType": "struct Router10X60.Routes",
          "name": "routes",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    }
  ],
  "contractName": "Router10X60",
  "sourceName": "solc_0.8/router/Router10X60.sol",
  "bytecode": "",
  "deployedBytecode": "0x60806040526000803560e01c90808061003960017f00000000000000000000000000000000000000000000000000000000000000006106a4565b90505b8082116103d5576000600261005183856106bd565b61005b91906106d0565b9050600060068210156100a45761007382602861070b565b7f0000000000000000000000000000000000000000000000000000000000000000901c64ffffffffff169050610367565b600c8210156100f4576100b86006836106a4565b6100c390602861070b565b7f0000000000000000000000000000000000000000000000000000000000000000901c64ffffffffff169050610367565b601282101561014457610108600c836106a4565b61011390602861070b565b7f0000000000000000000000000000000000000000000000000000000000000000901c64ffffffffff169050610367565b6018821015610194576101586012836106a4565b61016390602861070b565b7f0000000000000000000000000000000000000000000000000000000000000000901c64ffffffffff169050610367565b601e8210156101e4576101a86018836106a4565b6101b390602861070b565b7f0000000000000000000000000000000000000000000000000000000000000000901c64ffffffffff169050610367565b6024821015610234576101f8601e836106a4565b61020390602861070b565b7f0000000000000000000000000000000000000000000000000000000000000000901c64ffffffffff169050610367565b602a821015610284576102486024836106a4565b61025390602861070b565b7f0000000000000000000000000000000000000000000000000000000000000000901c64ffffffffff169050610367565b60308210156102d457610298602a836106a4565b6102a390602861070b565b7f0000000000000000000000000000000000000000000000000000000000000000901c64ffffffffff169050610367565b6036821015610324576102e86030836106a4565b6102f390602861070b565b7f0000000000000000000000000000000000000000000000000000000000000000901c64ffffffffff169050610367565b61032f6036836106a4565b61033a90602861070b565b7f0000000000000000000000000000000000000000000000000000000000000000901c64ffffffffff1690505b63ffffffff600882901c811690871681111561038f576103886001846106a4565b93506103cd565b8663ffffffff168163ffffffff1610156103b5576103ae8360016106bd565b94506103cd565b6103c360ff831660016106bd565b95505050506103d5565b50505061003c565b60008360010361040657507f00000000000000000000000000000000000000000000000000000000000000006105d0565b8360020361043557507f00000000000000000000000000000000000000000000000000000000000000006105d0565b8360030361046457507f00000000000000000000000000000000000000000000000000000000000000006105d0565b8360040361049357507f00000000000000000000000000000000000000000000000000000000000000006105d0565b836005036104c257507f00000000000000000000000000000000000000000000000000000000000000006105d0565b836006036104f157507f00000000000000000000000000000000000000000000000000000000000000006105d0565b8360070361052057507f00000000000000000000000000000000000000000000000000000000000000006105d0565b8360080361054f57507f00000000000000000000000000000000000000000000000000000000000000006105d0565b8360090361057e57507f00000000000000000000000000000000000000000000000000000000000000006105d0565b83600a036105ad57507f00000000000000000000000000000000000000000000000000000000000000006105d0565b507f00000000000000000000000000000000000000000000000000000000000000005b73ffffffffffffffffffffffffffffffffffffffff8116610651576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f554e4b4e4f574e5f4d4554484f44000000000000000000000000000000000000604482015260640160405180910390fd5b3660008037600080366000845af43d6000803e808015610670573d6000f35b3d6000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b818103818111156106b7576106b7610675565b92915050565b808201808211156106b7576106b7610675565b600082610706577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b80820281158282048414176106b7576106b761067556fea26469706673582212206889e9ee23e4ab5343426ac513f4fdc78f5300056e7d2ce9ecacde5bc8f1d43d64736f6c63430008140033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "author": "Ronan Sandford",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "routes": "define the routing   each selector is represented by a bytes5, where the upper most bytes4 is the selector and   the lowest bytes represent the index of the implementations  implementations' addresses are given in an array"
        }
      }
    },
    "title": "Router for at max 10 Implementations and 60 function selectors",
    "version": 1
  },
  "evm": {
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "376000",
        "executionCost": "infinite",
        "totalCost": "infinite"
      },
      "external": {
        "": "infinite"
      }
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"implementations\",\"type\":\"address[]\"},{\"internalType\":\"bytes5[]\",\"name\":\"sigMap\",\"type\":\"bytes5[]\"},{\"internalType\":\"address\",\"name\":\"fallbackImplementation\",\"type\":\"address\"}],\"internalType\":\"struct Router10X60.Routes\",\"name\":\"routes\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"}],\"devdoc\":{\"author\":\"Ronan Sandford\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"routes\":\"define the routing   each selector is represented by a bytes5, where the upper most bytes4 is the selector and   the lowest bytes represent the index of the implementations  implementations' addresses are given in an array\"}}},\"title\":\"Router for at max 10 Implementations and 60 function selectors\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"This Router implementation only support at max 10 implementations and 60 function selectors\"}},\"notice\":\"Create an immutable route and delegate function call to their respective implementations\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"solc_0.8/router/Router10X60.sol\":\"Router10X60\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"solc_0.8/router/Router10X60.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Router for at max 10 Implementations and 60 function selectors\\n/// @author Ronan Sandford\\n/// @notice Create an immutable route and delegate function call to their respective implementations\\ncontract Router10X60 {\\n\\taddress internal immutable implementation_00;\\n\\taddress internal immutable implementation_01;\\n\\taddress internal immutable implementation_02;\\n\\taddress internal immutable implementation_03;\\n\\taddress internal immutable implementation_04;\\n\\taddress internal immutable implementation_05;\\n\\taddress internal immutable implementation_06;\\n\\taddress internal immutable implementation_07;\\n\\taddress internal immutable implementation_08;\\n\\taddress internal immutable implementation_09;\\n\\n\\taddress internal immutable fallback_implementation;\\n\\n\\tuint256 internal immutable sigs_00;\\n\\tuint256 internal immutable sigs_01;\\n\\tuint256 internal immutable sigs_02;\\n\\tuint256 internal immutable sigs_03;\\n\\tuint256 internal immutable sigs_04;\\n\\tuint256 internal immutable sigs_05;\\n\\tuint256 internal immutable sigs_06;\\n\\tuint256 internal immutable sigs_07;\\n\\tuint256 internal immutable sigs_08;\\n\\tuint256 internal immutable sigs_09;\\n\\n\\tuint256 internal immutable sigs_count;\\n\\n\\t// This is the interface for routes specification\\n\\tstruct Routes {\\n\\t\\taddress[] implementations;\\n\\t\\t/// The sigmap is represented as an array of entry\\n\\t\\t// each entry is 5 bytes\\n\\t\\t/// the upmost bytes are the bytes4 function selector\\n\\t\\t// the lowest byte represent the index in the implementation's address array provided aling\\n\\t\\t// This measn there is at max 256 implementation possible\\n\\t\\t// The entry needs to be ordered so binary search can be executed on them\\n\\t\\tbytes5[] sigMap;\\n\\t\\taddress fallbackImplementation;\\n\\t}\\n\\n\\t/// @notice This Router implementation only support at max 10 implementations and 60 function selectors\\n\\t/// @param routes define the routing \\n\\t///  each selector is represented by a bytes5, where the upper most bytes4 is the selector and \\n\\t///  the lowest bytes represent the index of the implementations\\n\\t///  implementations' addresses are given in an array\\n\\tconstructor(Routes memory routes) {\\n\\t\\tuint256 numSigs = routes.sigMap.length;\\n\\t\\tuint256 numImpl = routes.implementations.length;\\n\\t\\trequire(numImpl <= 10, 'MAX_IMPLEMENTATIONS_REACHED');\\n\\t\\trequire(numSigs <= 60, 'MAX_SIGS_REACHED');\\n\\n\\t\\t{\\n\\t\\t\\taddress tmp_implementation_00 = routes.implementations[0];\\n\\t\\t\\taddress tmp_implementation_01;\\n\\t\\t\\taddress tmp_implementation_02;\\n\\t\\t\\taddress tmp_implementation_03;\\n\\t\\t\\taddress tmp_implementation_04;\\n\\t\\t\\taddress tmp_implementation_05;\\n\\t\\t\\taddress tmp_implementation_06;\\n\\t\\t\\taddress tmp_implementation_07;\\n\\t\\t\\taddress tmp_implementation_08;\\n\\t\\t\\taddress tmp_implementation_09;\\n\\t\\t\\tif (numImpl > 1) {\\n\\t\\t\\t\\ttmp_implementation_01 = routes.implementations[1];\\n\\t\\t\\t}\\n\\t\\t\\tif (numImpl > 2) {\\n\\t\\t\\t\\ttmp_implementation_02 = routes.implementations[2];\\n\\t\\t\\t}\\n\\t\\t\\tif (numImpl > 3) {\\n\\t\\t\\t\\ttmp_implementation_03 = routes.implementations[3];\\n\\t\\t\\t}\\n\\t\\t\\tif (numImpl > 4) {\\n\\t\\t\\t\\ttmp_implementation_04 = routes.implementations[4];\\n\\t\\t\\t}\\n\\t\\t\\tif (numImpl > 5) {\\n\\t\\t\\t\\ttmp_implementation_05 = routes.implementations[5];\\n\\t\\t\\t}\\n\\t\\t\\tif (numImpl > 6) {\\n\\t\\t\\t\\ttmp_implementation_06 = routes.implementations[6];\\n\\t\\t\\t}\\n\\t\\t\\tif (numImpl > 7) {\\n\\t\\t\\t\\ttmp_implementation_07 = routes.implementations[7];\\n\\t\\t\\t}\\n\\t\\t\\tif (numImpl > 8) {\\n\\t\\t\\t\\ttmp_implementation_08 = routes.implementations[8];\\n\\t\\t\\t}\\n\\t\\t\\tif (numImpl > 9) {\\n\\t\\t\\t\\ttmp_implementation_09 = routes.implementations[9];\\n\\t\\t\\t}\\n\\n\\t\\t\\timplementation_00 = tmp_implementation_00;\\n\\t\\t\\timplementation_01 = tmp_implementation_01;\\n\\t\\t\\timplementation_02 = tmp_implementation_02;\\n\\t\\t\\timplementation_03 = tmp_implementation_03;\\n\\t\\t\\timplementation_04 = tmp_implementation_04;\\n\\t\\t\\timplementation_05 = tmp_implementation_05;\\n\\t\\t\\timplementation_06 = tmp_implementation_06;\\n\\t\\t\\timplementation_07 = tmp_implementation_07;\\n\\t\\t\\timplementation_08 = tmp_implementation_08;\\n\\t\\t\\timplementation_09 = tmp_implementation_09;\\n\\t\\t}\\n\\n\\t\\t{\\n\\t\\t\\tuint256 tmp_sigs_00;\\n\\t\\t\\tuint256 tmp_sigs_01;\\n\\t\\t\\tuint256 tmp_sigs_02;\\n\\t\\t\\tuint256 tmp_sigs_03;\\n\\t\\t\\tuint256 tmp_sigs_04;\\n\\t\\t\\tuint256 tmp_sigs_05;\\n\\t\\t\\tuint256 tmp_sigs_06;\\n\\t\\t\\tuint256 tmp_sigs_07;\\n\\t\\t\\tuint256 tmp_sigs_08;\\n\\t\\t\\tuint256 tmp_sigs_09;\\n\\t\\t\\t\\n\\t\\t\\tuint256 lastSig;\\n\\t\\t\\tfor (uint256 i = 0; i < numSigs; i++) {\\n\\t\\t\\t\\tuint256 pair = uint256(uint40(routes.sigMap[i]));\\n\\t\\t\\t\\tuint32 sig = uint32(pair >> 8);\\n\\t\\t\\t\\trequire(lastSig < sig, \\\"NOT_IN_ORDER\\\");\\n\\t\\t\\t\\tlastSig = sig;\\n\\t\\t\\t\\tif (i < 6) {\\n\\t\\t\\t\\t\\ttmp_sigs_00 = tmp_sigs_00 | (pair << (i * 40));\\n\\t\\t\\t\\t} else if (i < 12) {\\n\\t\\t\\t\\t\\ttmp_sigs_01 = tmp_sigs_01 | (pair << ((i - 6) * 40));\\n\\t\\t\\t\\t} else if (i < 18) {\\n\\t\\t\\t\\t\\ttmp_sigs_02 = tmp_sigs_02 | (pair << ((i - 12) * 40));\\n\\t\\t\\t\\t} else if (i < 24) {\\n\\t\\t\\t\\t\\ttmp_sigs_03 = tmp_sigs_03 | (pair << ((i - 18) * 40));\\n\\t\\t\\t\\t} else if (i < 30) {\\n\\t\\t\\t\\t\\ttmp_sigs_04 = tmp_sigs_04 | (pair << ((i - 24) * 40));\\n\\t\\t\\t\\t} else if (i < 36) {\\n\\t\\t\\t\\t\\ttmp_sigs_05 = tmp_sigs_05 | (pair << ((i - 30) * 40));\\n\\t\\t\\t\\t} else if (i < 42) {\\n\\t\\t\\t\\t\\ttmp_sigs_06 = tmp_sigs_06 | (pair << ((i - 36) * 40));\\n\\t\\t\\t\\t} else if (i < 48) {\\n\\t\\t\\t\\t\\ttmp_sigs_07 = tmp_sigs_07 | (pair << ((i - 42) * 40));\\n\\t\\t\\t\\t} else if (i < 54) {\\n\\t\\t\\t\\t\\ttmp_sigs_07 = tmp_sigs_08 | (pair << ((i - 48) * 40));\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\ttmp_sigs_07 = tmp_sigs_09 | (pair << ((i - 54) * 40));\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tsigs_00 = tmp_sigs_00;\\n\\t\\t\\tsigs_01 = tmp_sigs_01;\\n\\t\\t\\tsigs_02 = tmp_sigs_02;\\n\\t\\t\\tsigs_03 = tmp_sigs_03;\\n\\t\\t\\tsigs_04 = tmp_sigs_04;\\n\\t\\t\\tsigs_05 = tmp_sigs_05;\\n\\t\\t\\tsigs_06 = tmp_sigs_06;\\n\\t\\t\\tsigs_07 = tmp_sigs_07;\\n\\t\\t\\tsigs_08 = tmp_sigs_08;\\n\\t\\t\\tsigs_09 = tmp_sigs_09;\\n\\n\\t\\t\\tsigs_count = numSigs;\\n\\t\\t}\\n\\n\\t\\tfallback_implementation = routes.fallbackImplementation;\\n\\t}\\n\\n\\tfallback() external payable {\\n\\t\\tuint32 sig = uint32(msg.sig);\\n\\t\\tuint256 implementationIndex;\\n\\t\\tuint256 left = 0;\\n    \\tuint256 right = sigs_count - 1;\\n\\t\\twhile (left <= right) {\\n\\t\\t\\tuint256 i = (left + right) / 2;\\n\\t\\t\\tuint40 pair;\\n\\t\\t\\tif (i < 6) {\\n\\t\\t\\t\\tpair = uint40((sigs_00 >> (i * 40)) & 0xFFFFFFFFFF);\\n\\t\\t\\t} else if (i < 12) {\\n\\t\\t\\t\\tpair = uint40((sigs_01 >> ((i - 6) * 40)) & 0xFFFFFFFFFF);\\n\\t\\t\\t} else if (i < 18) {\\n\\t\\t\\t\\tpair = uint40((sigs_02 >> ((i - 12) * 40)) & 0xFFFFFFFFFF);\\n\\t\\t\\t} else if (i < 24) {\\n\\t\\t\\t\\tpair = uint40((sigs_03 >> ((i - 18) * 40)) & 0xFFFFFFFFFF);\\n\\t\\t\\t} else if (i < 30) {\\n\\t\\t\\t\\tpair = uint40((sigs_04 >> ((i - 24) * 40)) & 0xFFFFFFFFFF);\\n\\t\\t\\t} else if (i < 36) {\\n\\t\\t\\t\\tpair = uint40((sigs_05 >> ((i - 30) * 40)) & 0xFFFFFFFFFF);\\n\\t\\t\\t} else if (i < 42) {\\n\\t\\t\\t\\tpair = uint40((sigs_06 >> ((i - 36) * 40)) & 0xFFFFFFFFFF);\\n\\t\\t\\t}  else if (i < 48) {\\n\\t\\t\\t\\tpair = uint40((sigs_07 >> ((i - 42) * 40)) & 0xFFFFFFFFFF);\\n\\t\\t\\t}  else if (i < 54) {\\n\\t\\t\\t\\tpair = uint40((sigs_08 >> ((i - 48) * 40)) & 0xFFFFFFFFFF);\\n\\t\\t\\t}  else {\\n\\t\\t\\t\\tpair = uint40((sigs_09 >> ((i - 54) * 40)) & 0xFFFFFFFFFF);\\n\\t\\t\\t}\\n\\t\\t\\tuint32 value = uint32(pair >> 8);\\n\\t\\t\\tif (value > sig) {\\n\\t\\t\\t\\tright = i -1;\\n\\t\\t\\t} else if (value < sig) {\\n\\t\\t\\t\\tleft = i + 1;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\timplementationIndex = uint256(pair & 0xFF) + 1;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\taddress implementation;\\n\\t\\tif (implementationIndex == 1) {\\n\\t\\t\\timplementation = implementation_00;\\n\\t\\t} else if (implementationIndex == 2) {\\n\\t\\t\\timplementation = implementation_01;\\n\\t\\t} else if (implementationIndex == 3) {\\n\\t\\t\\timplementation = implementation_02;\\n\\t\\t} else if (implementationIndex == 4) {\\n\\t\\t\\timplementation = implementation_03;\\n\\t\\t} else if (implementationIndex == 5) {\\n\\t\\t\\timplementation = implementation_04;\\n\\t\\t} else if (implementationIndex == 6) {\\n\\t\\t\\timplementation = implementation_05;\\n\\t\\t} else if (implementationIndex == 7) {\\n\\t\\t\\timplementation = implementation_06;\\n\\t\\t} else if (implementationIndex == 8) {\\n\\t\\t\\timplementation = implementation_07;\\n\\t\\t} else if (implementationIndex == 9) {\\n\\t\\t\\timplementation = implementation_08;\\n\\t\\t} else if (implementationIndex == 10) {\\n\\t\\t\\timplementation = implementation_09;\\n\\t\\t} else {\\n\\t\\t\\timplementation = fallback_implementation;\\n\\t\\t}\\n\\n\\t\\trequire(implementation != address(0), 'UNKNOWN_METHOD');\\n\\n\\t\\t// taken from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/8cab922347e79732f6a532a75da5081ba7447a71/contracts/proxy/Proxy.sol#L22-L45\\n\\t\\tassembly {\\n\\t\\t\\t// Copy msg.data. We take full control of memory in this inline assembly\\n\\t\\t\\t// block because it will not return to Solidity code. We overwrite the\\n\\t\\t\\t// Solidity scratch pad at memory position 0.\\n\\t\\t\\tcalldatacopy(0, 0, calldatasize())\\n\\n\\t\\t\\t// Call the implementation.\\n\\t\\t\\t// out and outsize are 0 because we don't know the size yet.\\n\\t\\t\\tlet result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n\\t\\t\\t// Copy the returned data.\\n\\t\\t\\treturndatacopy(0, 0, returndatasize())\\n\\n\\t\\t\\tswitch result\\n\\t\\t\\t// delegatecall returns 0 on error.\\n\\t\\t\\tcase 0 {\\n\\t\\t\\t\\trevert(0, returndatasize())\\n\\t\\t\\t}\\n\\t\\t\\tdefault {\\n\\t\\t\\t\\treturn(0, returndatasize())\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x8f51b7932023299088698f99c6f75f54cf880417d4a42c38548e17b7850d8646\",\"license\":\"MIT\"}},\"version\":1}",
  "storageLayout": {
    "storage": [],
    "types": null
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "This Router implementation only support at max 10 implementations and 60 function selectors"
      }
    },
    "notice": "Create an immutable route and delegate function call to their respective implementations",
    "version": 1
  },
  "argsData": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000bee0c6c405847203de86492f7753b4d0a379c20f0000000000000000000000003ab3844d5d6614febbe19d59244a815cff691a170000000000000000000000009370d088b7022593f550dfe8e7490207d8709a08000000000000000000000000e5c05697666a18bbb0f1f620237402413cf7e1a1000000000000000000000000000000000000000000000000000000000000002201ffc9a70200000000000000000000000000000000000000000000000000000006fdde0302000000000000000000000000000000000000000000000000000000081812fc02000000000000000000000000000000000000000000000000000000095ea7b3020000000000000000000000000000000000000000000000000000000a8bcdb90100000000000000000000000000000000000000000000000000000010837a39010000000000000000000000000000000000000000000000000000001fdd8a6901000000000000000000000000000000000000000000000000000000206848f60000000000000000000000000000000000000000000000000000000023b872dd020000000000000000000000000000000000000000000000000000002779347e0300000000000000000000000000000000000000000000000000000042842e0e0200000000000000000000000000000000000000000000000000000048f3c51c020000000000000000000000000000000000000000000000000000004dd3ab2301000000000000000000000000000000000000000000000000000000599a71c6010000000000000000000000000000000000000000000000000000006352211e0200000000000000000000000000000000000000000000000000000070a08231020000000000000000000000000000000000000000000000000000008b8fc3a10100000000000000000000000000000000000000000000000000000095d89b4102000000000000000000000000000000000000000000000000000000990b050900000000000000000000000000000000000000000000000000000000a22cb46502000000000000000000000000000000000000000000000000000000ae37a62d01000000000000000000000000000000000000000000000000000000afa1e2d101000000000000000000000000000000000000000000000000000000b88d4fde02000000000000000000000000000000000000000000000000000000c3f909d400000000000000000000000000000000000000000000000000000000c87b56dd02000000000000000000000000000000000000000000000000000000cd315b0803000000000000000000000000000000000000000000000000000000d401978301000000000000000000000000000000000000000000000000000000d671011201000000000000000000000000000000000000000000000000000000d703f50a03000000000000000000000000000000000000000000000000000000df97113403000000000000000000000000000000000000000000000000000000e985e9c502000000000000000000000000000000000000000000000000000000f18885ce00000000000000000000000000000000000000000000000000000000f394528202000000000000000000000000000000000000000000000000000000fa1026dd00000000000000000000000000000000000000000000000000000000",
  "transaction": {
    "hash": "0xeaf9368900f6973ca5d6eeabd5639a189055d705335ba854c00f93e47b027d8b",
    "origin": "0x61c461ecc993aadeb7e4b47e96d1b8cc37314b20"
  },
  "receipt": {
    "confirmations": 0,
    "blockHash": "0xfb646e8deffbf11ef88e8c9fb4a42c5b1ba67d7e8598ea0e99cdb408e0061f44",
    "blockNumber": "0x1b2e69",
    "transactionIndex": "0xb"
  }
}