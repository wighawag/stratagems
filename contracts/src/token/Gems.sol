// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.0;

import "solidity-kit/solc_0_8/ERC20/implementations/ERC20Base.sol";
import "solidity-kit/solc_0_8/ERC20/ERC2612/implementations/UsingPermitWithDynamicChainID.sol";
import "solidity-kit/solc_0_8/ERC173/implementations/Owned.sol";
import "solidity-kit/solc_0_8/utils/UsingGenericErrors.sol";
import "./interface/IReward.sol";

/// @title Gems Tokens
/// @notice Gems Tokens initialy generated by playing instances of Stratagems
contract Gems is Owned, ERC20Base, UsingPermitWithDynamicChainID, IReward {
    event GeneratorEnabled(address generator, bool enabled);

    mapping(address => bool) public generators;

    string public constant symbol = "GEM";

    constructor(
        address initialOwner,
        address initialBenefieciary,
        uint256 amount
    ) Owned(initialOwner) UsingPermitWithDynamicChainID(address(this)) {
        _mint(initialBenefieciary, amount);
    }

    /// @inheritdoc IERC20
    function name() public pure override(IERC20, Named) returns (string memory) {
        return "Gems";
    }

    function setGenerator(address generator, bool enabled) external onlyOwner {
        generators[generator] = enabled;
        emit GeneratorEnabled(generator, enabled);
    }

    /// @inheritdoc IReward
    function reward(address to, uint256 amount) external onlyGenerators {
        _mint(to, amount);
    }

    modifier onlyGenerators() {
        if (!generators[msg.sender]) {
            revert UsingGenericErrors.NotAuthorized();
        }
        _;
    }
}
